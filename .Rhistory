panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig.dtwA
## dtwA ------------------------------------------------------------------------
fig.dtwA = df %>%
filter(group %in% c("Y", "X0")) %>%
ggplot(aes(x = time, y = value, color = group)) +
geom_line(data = df %>% filter(!is.na(dtwA)),
aes(group = dtwA), color = "grey80",
linetype = "dashed", size = 1) +
geom_segment(aes(x = 500, y = -10, xend = 500, yend = 50),
color = "grey30", size = 0.5, linetype = "solid") +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey10", size = 3) +
geom_point(aes(x = cutoff, y = df$value[cutoff+1000]),
color = "#fe4a49", size = 3) +
scale_color_manual(name = NULL, values = c("grey10", "#fe4a49")) +
annotate("text", x = 475, y = df$value[t_treat]+5, label = "T",
size = 5, col = "grey10", parse=TRUE) +
annotate("text", x = 460, y = df$value[1000+cutoff]-3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
annotate("text", x = 250, y = 15, label = "P[pre]",
size = 6, col = "grey20", parse = TRUE) +
coord_cartesian(ylim = c(0, 45), xlim = c(-150, 1150)) +
ggtitle(expression(paste("1. Match ", Y[pre], " and ", X[pre]))) +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig.dtwA
## dtwA ------------------------------------------------------------------------
fig.dtwA = df %>%
filter(group %in% c("Y", "X0")) %>%
ggplot(aes(x = time, y = value, color = group)) +
geom_line(data = df %>% filter(!is.na(dtwA)),
aes(group = dtwA), color = "grey80",
linetype = "dashed", size = 1) +
geom_segment(aes(x = 500, y = -10, xend = 500, yend = 50),
color = "grey30", size = 0.5, linetype = "solid") +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey10", size = 3) +
geom_point(aes(x = cutoff, y = df$value[cutoff+1000]),
color = "#fe4a49", size = 3) +
scale_color_manual(name = NULL, values = c("grey10", "#fe4a49")) +
annotate("text", x = 475, y = df$value[t_treat]+5, label = "T",
size = 5, col = "grey10", parse=TRUE) +
annotate("text", x = 460, y = df$value[1000+cutoff]-3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
annotate("text", x = 250, y = 15, label = "P[pre]",
size = 6, col = "grey20", parse = TRUE) +
coord_cartesian(ylim = c(0, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("1. Match ", Y[pre], " and ", X[pre]))) +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
library(tidyverse)
short = sin(seq(0, 2*pi, length.out = 50))
long = sin(seq(0, 2*pi, length.out = 100))
x = c(short, long)
y = c(long, short)
# res_dtw = dtw::dtw(x, y, keep = TRUE, step.pattern = dtw::symmetric1)
# n_line = 150
# match_pairs = get_match_pairs(res_dtw, n_line)
# match_pairs = match_pairs[c(seq(1,100, length.out = 20),
#                             seq(101,150, length.out = 20)),]
# match_pairs = data.frame(ind_q = c(1:100, rep(101:150, each = 2)),
#                          ind_r = c(rep(1:50, each = 2), 51:150))
# match_pairs = match_pairs[c(which((1:nrow(match_pairs))%%10 == 1), 200),]
df_left = rbind(
data.frame(time = c(1:50, 50:149),
value = x + 5,
unit = "x"),
data.frame(time = c(1:100, 100:149),
value = y,
unit = "y")
)
points_x = c(seq(1,50, length.out = 5) %>% round() %>% .[1:4],
seq(50,150, length.out = 10) %>% round())
points_y = c(seq(1,100, length.out = 10) %>% round() %>% .[1:9],
seq(100,150, length.out = 5) %>% round())
df_match = rbind(
df_left[points_x[1:5],] %>% mutate(dtw = 1:5),
df_left[points_x[1:5],] %>% mutate(dtw = 6:10),
df_left[points_x[(1:5)*2+3],] %>% mutate(dtw = 11:15),
df_left[points_x[(1:5)*2+4],] %>% mutate(dtw = 16:20),
df_left[points_y[(1:5)*2-1]+150,] %>% mutate(dtw = 1:5),
df_left[points_y[(1:5)*2]+150,] %>% mutate(dtw = 6:10),
df_left[points_y[10:14]+150,] %>% mutate(dtw = 11:15),
df_left[points_y[10:14]+150,] %>% mutate(dtw = 16:20)
)
df_match = df_match %>%
mutate(group = case_when(dtw >= 11 ~ "blue",
dtw %in% c(3,8) ~ "black",
dtw == 10 ~ "red_end",
TRUE ~ "red"))
# df_left$dtw = NA
# df_left$dtw[match_pairs$ind_r] = 1:nrow(match_pairs)
# df_left$dtw[match_pairs$ind_q + 150] = 1:nrow(match_pairs)
size_line_ts = 1
size_line_warp = 1
size_point = 3
color_main = "grey40"
color_line_warp_0 = "#fe4a49"
color_line_warp_1 = "#fe4a49"
color_line_warp_2 = "#2ab7ca"
fig_left = df_left %>%
ggplot(aes(x = time, y = value, group = unit)) +
geom_line(data = df_match %>% filter(group %in% c("red")),
aes(group = dtw), color = color_line_warp_1,
linetype = "dashed", linewidth = size_line_warp - 0.1) +
geom_line(data = df_match %>% filter(group == "red_end"),
aes(group = dtw), color = color_line_warp_0,
linetype = "twodash", linewidth = size_line_warp - 0.1) +
geom_line(data = df_match %>% filter(group == "black"),
aes(group = dtw), color = "black",
linetype = "dashed", linewidth = size_line_warp - 0.1) +
geom_line(data = df_match %>% filter(group %in% c("blue")),
aes(group = dtw), color = color_line_warp_2,
linetype = "dashed", linewidth = size_line_warp - 0.1) +
geom_line(size = size_line_ts, color = color_main) +
geom_point(aes(x = time[26], y = value[26]),
color = "black", size = size_point) +
geom_point(aes(x = time[45], y = value[195]),
color = "black", size = size_point) +
geom_point(aes(x = time[57], y = value[207]),
color = "black", size = size_point) +
annotate("text", x = df_left$time[26] + 2, y = df_left$value[26] + 0.5, label = "y[3]", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
annotate("text", x = df_left$time[45], y = df_left$value[195] - 0.5, label = "x[5]", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
annotate("text", x = df_left$time[57], y = df_left$value[207] - 0.5, label = "x[6]", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
annotate("text", x = 75, y = -1.5, label = "X", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
annotate("text", x = 75, y = 6.5, label = "Y", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
ggtitle("DTW") +
theme_minimal() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=17, face="bold", hjust = 0.5),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df_right = data.frame(ind_y = c(1:10, rep(10:14, each = 2)),
ind_x = c(rep(1:5, each = 2), 5:14))
df_right$colors = c(rep("#2ab7ca", 10), rep("#fe4a49", 10))
df_right$value = c(rep(1, 10), rep(1, 10))
df_right = df_right[-11,]
df_right$colors[10] = "#94818A"
grid = expand.grid(1:14, 1:14)
df_right = left_join(grid, df_right, by = c("Var1"="ind_x","Var2"="ind_y"))
df_right$colors[is.na(df_right$colors)] = "white"
fig_right = df_right %>%
ggplot(aes(x = Var2, y = Var1)) +
geom_tile(aes(fill=colors),color = "grey40",
lwd = 1.5,
linetype = 1) +
scale_fill_manual(values = c("#fe4a49", "#94818A", "#2ab7ca", "white")) +
geom_text(aes(label = value), size = 5, color = "black") +
geom_segment(aes(x = 4.6, y = 3, xend = 0.5, yend = 3), linewidth = 1,
arrow = arrow(length = unit(0.2, "cm"))) +
geom_segment(aes(x = 5, y = 2.6, xend = 5, yend = 0.5), linewidth = 1,
arrow = arrow(length = unit(0.2, "cm"))) +
geom_segment(aes(x = 6, y = 2.6, xend = 6, yend = 0.5), linewidth = 1,
arrow = arrow(length = unit(0.2, "cm"))) +
annotate("text", x = -0.1, y = 3, label = "y[3]", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
annotate("text", x = 5, y = -0.1, label = "x[5]", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
annotate("text", x = 6, y = -0.1, label = "x[6]", fontface = "bold",
size = 6, col = "black", parse=TRUE) +
xlab("X") +
ylab("Y") +
ggtitle("Warping Path") +
theme_minimal() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=17, face="bold", hjust = 0.5),
axis.title=element_text(size = 17),
axis.text=element_blank(),
axis.ticks=element_blank())
fig_all = gridExtra::grid.arrange(fig_left, fig_right, ncol = 2)
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
install.packages("furrr")
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/simulate.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
folder = "./data/res_sim/1006/"
file.list = as.list(list.files(folder))
length = 100
treat_time = 60
n_mse = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
n.simulation = 100
length = 100
n = 10
beta = 1
shock = 10
length = 100
treat_time = 60
n_mse = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
pre.start = 51
pre.end = 60
post.start = 61
post.end = 70
df.mse = readRDS("./data/df.mse_sim_beta_1.Rds")
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw))
t.test(df.mse$log.ratio)
wilcox.test(df.mse$log.ratio)
nrow(df.mse)
sum(df.mse$log.ratio<0)
sum(df.mse$log.ratio<0)/nrow(df.mse)
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/misc.R")
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/simulate.R")
source("./R/utility/grid.search.R")
## 1. Speed Difference ---------------------------------------------------------
# function - sim.data
sim.data = function(n = 3, nCycles = 6, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 0, ar.x = 0.6, n.SMA = 1,
n.diff = 1, speed.upper = 2, speed.lower = 0.5,
reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = cos(seq(0, nCycles * pi, length.out = length + extra.x + n.SMA + n.diff - 1))
x = x/2 + 0.5
xt = 0
x.stack = NULL
for (j in 1:length(x)) {
xt = ar.x*xt + x[j]
x.stack = c(x.stack, xt)
}
x = x.stack
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = 2
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
y = y + rnorm(n = length(y), mean = 0, sd = 0.2)
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y))
}
return(data)
}
# funcation TFDTW.synth.all.units
TFDTW.synth.all.units = function(data, target,
args.TFDTW.synth,
filter.width = NULL,
res.synth.raw.list = NULL,
detailed.output = FALSE,
all.units.parallel = FALSE){
# prepare data
if (!is.null(filter.width)) {
data = preprocessing(data, filter.width)
}
args.TFDTW.synth[["data"]] = data
units = data[c("id", "unit")] %>% distinct
units.list = units %>% split(., seq(nrow(units))) %>% .[1]
# run TFDTW.synth
if (all.units.parallel) {
fun.map = furrr::future_map
}else{
fun.map = purrr::map
}
results = units.list %>%
set_names(units$unit[1]) %>%
fun.map(
~{
item = .
dependent = item$unit
dependent.id = item$id
args.TFDTW.synth[["dependent"]] = dependent
args.TFDTW.synth[["dependent.id"]] = dependent.id
args.TFDTW.synth[["res.synth.raw"]] = res.synth.raw.list[[dependent]]
do.call(TFDTW.synth, args.TFDTW.synth)
}
)
# compute log ratio
mse = lapply(results, '[[', "mse") %>%
do.call("rbind", .) %>%
mutate(ratio = mse.postT.TFDTW/mse.postT.raw,
log.ratio = log(ratio))
# output
res.synth.target.raw = results[[target]]$res.synth.raw
res.synth.target.TFDTW = results[[target]]$res.synth.TFDTW
if (!detailed.output) {
args.TFDTW.synth = NULL
results = NULL
}
return(list(target = target,
filter.width = filter.width,
args.TFDTW.synth = args.TFDTW.synth,
results.TFDTW.synth = results,
res.synth.target.raw = res.synth.target.raw,
res.synth.target.TFDTW = res.synth.target.TFDTW,
mse = mse))
}
# simulate data
data = sim.data(n = 3, nCycles = 8, length = 100,
t.treat = 60, shock = 0, ar.x = 0.8,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = 1)
count = 1
for (item in c("B", "C")) {
value = data %>% filter(unit == item) %>% .[["value"]]
for (lag in 1:5) {
value_lag = c(rep(value[1], lag),  value[1:(100-lag)])
data = rbind(data,
data.frame(id = 3 + count,
unit = paste0(item, "_lag", lag),
time = 1:100,
value = minmax.normalize(value_lag,
reference = value_lag[1:60])*20))
count = count + 1
}
for (power in 2:5) {
value_power = value %>% .^power
data = rbind(data,
data.frame(id = 3 + count,
unit = paste0(item, "_pow", power),
time = 1:100,
value = minmax.normalize(value_power,
reference = value_power[1:60])*20))
count = count + 1
}
}
data$time[1:90] = 11:100
data$time[91:100] = 1:10
data = data %>% filter(time %in% 16:100)
data$value_raw = data$value
data %>% ggplot(aes(x = time, y = value, color = unit)) + geom_line()
## estimate synthetic control
# (with lags) width = 9, k = 7, step.pattern = asymmetricP1
# (without lags) width = 11, k = 5, step.pattern = asymmetricP1
# parameters
filter.width.range = 9
k.range = 7
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
# symmetricP1 = dtw::symmetricP1,
# symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1#,
# asymmetricP2 = dtw::asymmetricP2,
# typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
# typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
# mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 20, match.method = "open.end",
dist.quant = 0.95,
window.type = "sakoechiba",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(list(dep.var, 50:59, c("mean")),
list(dep.var, 40:49, c("mean")),
list(dep.var, 30:39, c("mean")))),
time.predictors.prior = 16:59,
time.optimize.ssr = 16:59)
args.TFDTW.synth = list(start.time = 16, end.time = 100, treat.time = 60,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.7))
args.TFDTW.synth.all.units = list(target = "A",
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
install.packages("SimDesign")
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
install.packages("checkpoint")
install.packages("zip")
