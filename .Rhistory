time ~ unit, value.var = "diff_original")
df_original = reshape2::dcast(df[c("id", "time", "diff_original")],
time ~ id, value.var = "diff_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
DF.sc
df_new = reshape2::dcast(df[c("id", "time", "diff_new")],
time ~ id, value.var = "diff_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
DF.dsc
t.interval = 61:70
df2 = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df2)/length(t.interval)
var.original = df2 %>% group_by(id) %>%
summarise(variance = var(diff_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.new = df2 %>% group_by(id) %>%
summarise(variance = var(diff_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.new/var.original
f.value = round(f.value, 4)
f.value
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
p.value
DF.dsc
DF.sc
results = NULL
beta = 1
folder = "./data/res_sim/1010/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
ind = ind.max.neg.ratio[ind.min.p.value[1]]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean((diff_original)[treat_time:(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean((diff_new)[treat_time:(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
mse = mse)
}
)
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df_original = reshape2::dcast(df[c("id", "time", "diff_original")],
time ~ id, value.var = "diff_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
df_new = reshape2::dcast(df[c("id", "time", "diff_new")],
time ~ id, value.var = "diff_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
t.interval = 61:70
df2 = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df2)/length(t.interval)
var.original = df2 %>% group_by(id) %>%
summarise(variance = var(diff_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.new = df2 %>% group_by(id) %>%
summarise(variance = var(diff_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.new/var.original
f.value = round(f.value, 4)
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
f.value
p.value
DF.dsc
DF.sc
results = NULL
beta = 1
folder = "./data/res_sim/1011/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
ind = ind.max.neg.ratio[ind.min.p.value[1]]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean((diff_original)[treat_time:(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean((diff_new)[treat_time:(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
mse = mse)
}
)
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df_original = reshape2::dcast(df[c("id", "time", "diff_original")],
time ~ id, value.var = "diff_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
df_new = reshape2::dcast(df[c("id", "time", "diff_new")],
time ~ id, value.var = "diff_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
t.interval = 61:70
df2 = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df2)/length(t.interval)
var.original = df2 %>% group_by(id) %>%
summarise(variance = var(diff_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.new = df2 %>% group_by(id) %>%
summarise(variance = var(diff_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.new/var.original
f.value = round(f.value, 4)
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
f.value
DF.dsc
DF.sc
17*17*10
vif.dsc
load("./data/smoking.rda")
prop99 = read.csv("./data/prop99.csv")
exclude_states = c("Massachusetts", "Arizona", "Oregon", "Florida",
"Alaska", "Hawaii", "Maryland", "Michigan",
"New Jersey", "New York",
"Washington", "District of Columbia")
include_states = sort(setdiff(unique(prop99$LocationDesc),
exclude_states))
states = data.frame(id = 1:length(include_states),
unit = include_states)
smoking = smoking %>% mutate_all(as.numeric)
colnames(smoking)[1:3] = c("id", "time", "value")
smoking = right_join(states, smoking, by = "id")
smoking = smoking %>%
mutate(value_raw = value,
age15to24 = age15to24*100)
data = smoking
# rescale
df.rescale = data %>%
filter(time <= 1989) %>%
group_by(unit) %>%
summarise(value.min = min(value),
value.max = max(value)) %>%
ungroup()
mean.diff = mean(df.rescale$value.max - df.rescale$value.min)
df.rescale = df.rescale %>%
mutate(
multiplier = mean.diff/(value.max - value.min)
)
data = left_join(data, df.rescale, by = "unit")
data = data %>%
mutate(
value.bak = value_raw,
value_raw = (value_raw - value.min)*multiplier,
value = value_raw
)
# data list
data.list = list(list(target = "California",
data = data))
ids = data$id %>%
unique
for (i in ids) {
data.temp = data %>% filter(!(id %in% c(i, 3)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
df = df2
df = df %>% filter(time %in% 1990:1997)
df_original = reshape2::dcast(df[c("unit", "time", "gap_original")],
time ~ unit, value.var = "gap_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1970:2000,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
var.sc = df %>% group_by(unit) %>%
summarise(variance = var(gap_original, na.rm = TRUE)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.dsc = df %>% group_by(unit) %>%
summarise(variance = var(gap_new, na.rm = TRUE)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
## California Tobacco Data -----------------------------------------------------
load("./data/smoking.rda")
prop99 = read.csv("./data/prop99.csv")
exclude_states = c("Massachusetts", "Arizona", "Oregon", "Florida",
"Alaska", "Hawaii", "Maryland", "Michigan",
"New Jersey", "New York",
"Washington", "District of Columbia")
include_states = sort(setdiff(unique(prop99$LocationDesc),
exclude_states))
states = data.frame(id = 1:length(include_states),
unit = include_states)
smoking = smoking %>% mutate_all(as.numeric)
colnames(smoking)[1:3] = c("id", "time", "value")
smoking = right_join(states, smoking, by = "id")
smoking = smoking %>%
mutate(value_raw = value,
age15to24 = age15to24*100)
data = smoking
# rescale
df.rescale = data %>%
filter(time <= 1989) %>%
group_by(unit) %>%
summarise(value.min = min(value),
value.max = max(value)) %>%
ungroup()
mean.diff = mean(df.rescale$value.max - df.rescale$value.min)
df.rescale = df.rescale %>%
mutate(
multiplier = mean.diff/(value.max - value.min)
)
data = left_join(data, df.rescale, by = "unit")
data = data %>%
mutate(
value.bak = value_raw,
value_raw = (value_raw - value.min)*multiplier,
value = value_raw
)
# data list
data.list = list(list(target = "California",
data = data))
ids = data$id %>%
unique
for (i in ids) {
data.temp = data %>% filter(!(id %in% c(i, 3)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
#         legend.box = "horizontal",
#         legend.background = element_rect(fill=NA))
#
# # ggsave("./figures/placebo_tobacco_1103.pdf",
# #        fig_tobacco, width = 8, height = 6,
# #        units = "in", limitsize = FALSE)
#
#
#
# ## Placebo v2 ------------------------------------------------------------------
results = NULL
folder = "./data/placebo/tobacco/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1970:2000,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
df = df %>% filter(time %in% 1990:1997)
df_original = reshape2::dcast(df[c("unit", "time", "gap_original")],
time ~ unit, value.var = "gap_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
value.icc.sc
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
df_new = reshape2::dcast(df[c("unit", "time", "gap_new")],
time ~ unit, value.var = "gap_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
value.icc.dsc
DF.sc
dim(df_original)[1]
dim(df_original)[2]
vif.sc
nrow(df_original) - 1
value.icc.sc
vif.sc
DF.sc
(dim(df_original)[1]*dim(df_original)[2])
dim(df_original)[2]
dim(df_original)[1]
1445/17
1445/38
DF.dsc
vif.dsc
vif.sc
