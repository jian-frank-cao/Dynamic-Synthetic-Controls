# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
mse = lapply(results, "[[", "mse") %>%
do.call("rbind", .)
ind.opt = which(mse$ratio == min(mse$ratio, na.rm = TRUE))
synthetic.original = results[[ind.opt]]$res.synth.target.raw$synthetic
synthetic.dsc = results[[ind.opt]]$res.synth.target.TFDTW$synthetic
n.na = sum(is.na(synthetic.dsc))
## plot figure
df = rbind(
data.frame(id = 1, unit = "Unit T", time = 151:1000,
value = approx(data[1:85,4], n = 850)$y),
data.frame(id = 2, unit = "Unit C1", time = 151:1000,
value = approx(data[86:170,4], n = 850)$y),
data.frame(id = 3, unit = "Unit C2", time = 151:1000,
value = approx(data[171:255,4], n = 850)$y),
data.frame(id = 4, unit = "SC", time = 151:1000,
value = approx(synthetic.original, n = 850)$y),
data.frame(id = 5, unit = "DSC", time = 151:1000,
value = c(approx(synthetic.dsc, n = (85-n.na)*10)$y, rep(NA, n.na*10)))
)
df$value = df$value + rnorm(4250, mean = 0, sd = 0.1)
fig = df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#2ab7ca",
"DSC" = "#fe4a49")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
11019.05/110
*5000
100*5000
11229.57*5000/110
175777*30/5000
fig
data = sim.data(n = 3, nCycles = 8, length = 100,
t.treat = 60, shock = 0, ar.x = 0.8,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = 1)
data$time[1:90] = 11:100
data$time[91:100] = 1:10
data = data %>% filter(time %in% 16:100)
data$value_raw = data$value
data %>% ggplot(aes(x = time, y = value, color = unit)) + geom_line()
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 20, match.method = "open.end",
dist.quant = 0.95,
window.type = "sakoechiba",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(list(dep.var, 50:59, c("mean")),
list(dep.var, 40:49, c("mean")),
list(dep.var, 30:39, c("mean")))),
time.predictors.prior = 16:59,
time.optimize.ssr = 16:59)
args.TFDTW.synth = list(start.time = 16, end.time = 100, treat.time = 60,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.7))
args.TFDTW.synth.all.units = list(target = "A",
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
mse = lapply(results, "[[", "mse") %>%
do.call("rbind", .)
ind.opt = which(mse$ratio == min(mse$ratio, na.rm = TRUE))
synthetic.original = results[[ind.opt]]$res.synth.target.raw$synthetic
synthetic.dsc = results[[ind.opt]]$res.synth.target.TFDTW$synthetic
n.na = sum(is.na(synthetic.dsc))
## plot figure
df = rbind(
data.frame(id = 1, unit = "Unit T", time = 151:1000,
value = approx(data[1:85,4], n = 850)$y),
data.frame(id = 2, unit = "Unit C1", time = 151:1000,
value = approx(data[86:170,4], n = 850)$y),
data.frame(id = 3, unit = "Unit C2", time = 151:1000,
value = approx(data[171:255,4], n = 850)$y),
data.frame(id = 4, unit = "SC", time = 151:1000,
value = approx(synthetic.original, n = 850)$y),
data.frame(id = 5, unit = "DSC", time = 151:1000,
value = c(approx(synthetic.dsc, n = (85-n.na)*10)$y, rep(NA, n.na*10)))
)
df$value = df$value + rnorm(4250, mean = 0, sd = 0.1)
fig = df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#2ab7ca",
"DSC" = "#fe4a49")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig
sim.data = function(n = 3, nCycles = 6, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 0, ar.x = 0.6, n.SMA = 1,
n.diff = 1, speed.upper = 2, speed.lower = 0.5,
reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = cos(seq(0, nCycles * pi, length.out = length + extra.x + n.SMA + n.diff - 1))
x = x/2 + 0.5
xt = 0
x2 = NULL
for (j in 1:length(x)) {
xt = 0.8*xt + x[j]
x2 = c(x2, xt)
}
x = x2
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = 2
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
y = y + rnorm(n = length(y), mean = 0, sd = 0.2)
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
data = sim.data(n = 3, nCycles = 8, length = 100,
t.treat = 60, shock = 0, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = 1)
data %>% ggplot(aes(x = time, y = value, color = unit)) + geom_line()
filter.width.range = 19
k.range = 7
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
# symmetricP1 = dtw::symmetricP1,
# symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
# asymmetricP1 = dtw::asymmetricP1,
# asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc#,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
# typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
# mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 20, match.method = "open.end",
dist.quant = 0.95,
window.type = "sakoechiba",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(list(dep.var, 50:59, c("mean")),
list(dep.var, 40:49, c("mean")),
list(dep.var, 30:39, c("mean")))),
time.predictors.prior = 1:59,
time.optimize.ssr = 1:59)
args.TFDTW.synth = list(start.time = 1, end.time = 100, treat.time = 60,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.7))
args.TFDTW.synth.all.units = list(target = "A",
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
df = rbind(
data.frame(id = 1, unit = "Unit T", time = 1:1000,
value = approx(data[1:100,4], n = 1000)$y),
data.frame(id = 2, unit = "Unit C1", time = 1:1000,
value = approx(data[101:200,4], n = 1000)$y),
data.frame(id = 3, unit = "Unit C2", time = 1:1000,
value = approx(data[201:300,4], n = 1000)$y),
data.frame(id = 4, unit = "Synthetic Control (Original)", time = 1:1000,
value = approx(results[[1]]$res.synth.target.raw$synthetic, n = 1000)$y),
data.frame(id = 5, unit = "Synthetic Control (TFDTW)", time = 1:1000,
value = c(approx(results[[1]]$res.synth.target.TFDTW$synthetic, n = 770)$y, rep(NA, 230)))
)
df$time[c(1:1000, 4001:5000)] = df$time[c(1:1000, 4001:5000)] + 100
df$value = df$value + rnorm(1000, mean = 0, sd = 0.1)
fig = df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "Synthetic Control (Original)" = "solid",
"Synthetic Control (TFDTW)" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "Synthetic Control (Original)" = "#3da4ab",
"Synthetic Control (TFDTW)" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig
df = rbind(
data.frame(id = 1, unit = "Unit T", time = 1:1000,
value = approx(data[1:100,4], n = 1000)$y),
data.frame(id = 2, unit = "Unit C1", time = 1:1000,
value = approx(data[101:200,4], n = 1000)$y),
data.frame(id = 3, unit = "Unit C2", time = 1:1000,
value = approx(data[201:300,4], n = 1000)$y),
data.frame(id = 4, unit = "SC", time = 1:1000,
value = approx(results[[1]]$res.synth.target.raw$synthetic, n = 1000)$y),
data.frame(id = 5, unit = "DSC", time = 1:1000,
value = c(approx(results[[1]]$res.synth.target.TFDTW$synthetic, n = 770)$y, rep(NA, 230)))
)
df$time[c(1:1000, 4001:5000)] = df$time[c(1:1000, 4001:5000)] + 100
df$value = df$value + rnorm(1000, mean = 0, sd = 0.1)
fig = df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#2ab7ca",
"DSC" = "#fe4a49")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
ggsave("./figures/speed_problem_1116.pdf",
fig, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
fig
a = matrix(rep(0, 10*10), ncol = 10)
a
a = matrix(rep(0, 5*5), ncol = 5)
a = matrix(rep(0, 5*5), ncol = 5)
a[1,1] = 1
a[2,2:3] = 1
a[3:4,3] = 1
a[4,4:5] = 1
a[5,5] = 1
a
warp2weight = function(W){
w = as.matrix(W)
count = rep(1/colSums(w), nrow(w)) %>%
matrix(.,
nrow = ncol(w),
ncol = nrow(w)) %>%
t(.)
weight = rowSums(w * count)
return(weight)
}
b = war2weight(a)
b = warp2weight(a)
library(checkpoint)
checkpoint("2022-04-01")
library(tidyverse)
a = matrix(rep(0, 5*5), ncol = 5)
a[1,1] = 1
a[2,2:3] = 1
a[3:4,3] = 1
a[4,4:5] = 1
a[5,5] = 1
warp2weight = function(W){
w = as.matrix(W)
count = rep(1/colSums(w), nrow(w)) %>%
matrix(.,
nrow = ncol(w),
ncol = nrow(w)) %>%
t(.)
weight = rowSums(w * count)
return(weight)
}
b = warp2weight(a)
b
weight.a = warp2weight(Wa)
library(tidyverse)
Wa = matrix(rep(0, 5*5), ncol = 5)
Wa[1,1] = 1
Wa[2,2:3] = 1
Wa[3:4,3] = 1
Wa[4,4:5] = 1
Wa[5,5] = 1
warp2weight = function(W){
w = as.matrix(W)
count = rep(1/colSums(w), nrow(w)) %>%
matrix(.,
nrow = ncol(w),
ncol = nrow(w)) %>%
t(.)
weight = rowSums(w * count)
return(weight)
}
weight.a = warp2weight(Wa)
weight.a
Wb = matrix(rep(0, 3*3), ncol = 3)
Wb[1,1:2] = 1
Wb[2:3,2] = 1
Wb[3,3] = 1
Wb
weight.a[2:4]
W.pp.i = Wb
W.pp.i %*% weight.a.Rs
weight.a.Rs = weight.a[2:4]
W.pp.i %*% weight.a.Rs
rowSums(as.matrix(W.pp.i))
(W.pp.i %*% weight.a.Rs)/rowSums(as.matrix(W.pp.i))
weight.b = (W.pp.i %*% weight.a.Rs)/rowSums(as.matrix(W.pp.i))
weight.b = as.numeric(weight.b)
weight.b
Wa[,2:4]
Wa
W.pp.i
W.pp.i %*% Wa[,2:4]
Wa[,2:4] %*% W.pp.i
res = Wa[,2:4] %*% W.pp.i
warp2weight(res)
weight.a
W.pp.i %*% weight.a.Rs
weight.a.Rs
