opt.grid = data.frame(unit = units, id = 0)
for (i in 1:nrow(opt.grid)) {
target = opt.grid$unit[i]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.grid[i,2] = as.numeric(scores$id[max.percent[min.p]])
}
tasks = unique(opt.grid$id)
tasks
# parameters
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
search.grid = expand.grid(filter.width.range, k.range,
names(step.pattern.range)) %>%
`colnames<-`(c("filter.width", "k", "step.pattern"))
tasks = cbind(data.frame(id = tasks),
search.grid[tasks,])
grid.search.parallel = FALSE
args.TFDTW = list(buffer = 0, match.method = "fixed",
dist.quant = 0.95,
window.type = "none",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = expression(c(dep.var,"trade","infrate")),
special.predictors =
expression(list(list("industry", 1981:1989, c("mean")),
list("schooling",c(1980,1985), c("mean")),
list("invest80" ,1980, c("mean")))),
time.predictors.prior = 1981:1989,
time.optimize.ssr = 1960:1989)
args.TFDTW.synth = list(start.time = 1960, end.time = 2003, treat.time = 1990,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = TRUE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.8))
args.TFDTW.synth.all.units = list(target = "West Germany",
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
detailed.output = TRUE,
## 2nd
all.units.parallel = TRUE)
results = tasks %>%
split(., seq(nrow(tasks))) %>%
set_names(tasks$id) %>%
future_map(
~{
search = .
args.TFDTW.synth.all.units[["data"]] = data
results = SimDesign::quiet(
grid.search(filter.width.range = search$filter.width,
k.range = search$k,
step.pattern.range = step.pattern.range[search$step.pattern],
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
results
}
)
# plot figures
df = future_map2(
results[as.character(opt.grid$id)],
units %>% as.list,
~{
item = .x[[1]]
unit = .y
value = item$results.TFDTW.synth[[unit]]$res.synth.raw$value
gap_original = item$results.TFDTW.synth[[unit]]$gap.raw
gap_new = item$results.TFDTW.synth[[unit]]$gap.TFDTW
data.frame(unit = unit,
time = 1960:2003,
value = value,
gap_original = gap_original,
gap_new = gap_new)
}
) %>%
do.call("rbind", .)
t.interval = 1991:2000
df2 = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df2)/length(t.interval)
var.original = df2 %>% group_by(unit) %>%
summarise(variance = var(gap_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.new = df2 %>% group_by(unit) %>%
summarise(variance = var(gap_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.new/var.original
f.value = round(f.value, 4)
p.value = pf(f.value, n.datasets - 1,
n.datasets - 1, lower.tail = TRUE)
p.value = round(p.value, 4)
f.value
f.value
p.value
n.datasets
View(df2)
results3 = results
#         legend.background = element_rect(fill=NA))
#
# # ggsave("./figures/placebo_germany_1103.pdf",
# #        fig_germany, width = 8, height = 6,
# #        units = "in", limitsize = FALSE)
#
#
#
#
## Placebo v2 ------------------------------------------------------------------
results = NULL
folder = "./data/placebo/germany/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1960:2003,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
synth_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$synthetic,
synth_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.TFDTW$synthetic
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
View(results)
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1960:2003,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
View(df)
df = df %>% filter(time %in% 1991:2000)
df_original = reshape2::dcast(df[c("unit", "time", "gap_original")],
time ~ unit, value.var = "gap_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
df_new = reshape2::dcast(df[c("unit", "time", "gap_new")],
time ~ unit, value.var = "gap_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
var.dsc = var(df$gap_new, na.rm = TRUE)
var.sc = var(df$gap_original, na.rm = TRUE)
f.value = var.dsc/var.sc
f.value = round(f.value, 4)
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
p.value = round(p.value, 4)
f.value
var.dsc
var.sc
View(df_new)
View(df)
t.interval = 1991:2000
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
n.datasets
t.interval = 1991:2000
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
var.sc = df %>% group_by(unit) %>%
summarise(variance = var(gap_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.dsc = df %>% group_by(unit) %>%
summarise(variance = var(gap_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.dsc
var.sc
f.value = var.dsc/var.sc
f.value = round(f.value, 4)
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
p.value = round(p.value, 4)
f.value
p.value
DF.dsc
df_original = reshape2::dcast(df[c("unit", "time", "gap_original")],
time ~ unit, value.var = "gap_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
df_new = reshape2::dcast(df[c("unit", "time", "gap_new")],
time ~ unit, value.var = "gap_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
DF.dsc
vif.dsc
value.icc.dsc
value.icc.sc
DF.dsc = 256
DF.sc = 256
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
p.value
#   theme(legend.position = "none",
#         legend.box = "horizontal",
#         legend.background = element_rect(fill=NA))
#
# # ggsave("./figures/placebo_basque_1103.pdf",
# #        fig_basque, width = 8, height = 6,
# #        units = "in", limitsize = FALSE)
#
#
## Placebo v2 ------------------------------------------------------------------
results = NULL
folder = "./data/placebo/basque/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1955:1997,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
df = df %>% filter(time %in% 1971:1980)
t.interval = 1991:2000
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
n.datasets
var.sc = df %>% group_by(unit) %>%
summarise(variance = var(gap_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.dsc = df %>% group_by(unit) %>%
summarise(variance = var(gap_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.dsc/var.sc
f.value = round(f.value, 4)
f.value
p.value = pf(f.value, n.datasets,
n.datasets, lower.tail = TRUE)
p.value
View(df)
t.interval = 1991:2000
t.interval = 1971:1980
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
var.sc = df %>% group_by(unit) %>%
summarise(variance = var(gap_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.dsc = df %>% group_by(unit) %>%
summarise(variance = var(gap_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.dsc/var.sc
f.value = round(f.value, 4)
p.value = pf(f.value, n.datasets,
n.datasets, lower.tail = TRUE)
p.value = round(p.value, 4)
f.value
p.value
#   theme(legend.position = "none",
#         legend.box = "horizontal",
#         legend.background = element_rect(fill=NA))
#
# # ggsave("./figures/placebo_basque_1103.pdf",
# #        fig_basque, width = 8, height = 6,
# #        units = "in", limitsize = FALSE)
#
#
## Placebo v2 ------------------------------------------------------------------
results = NULL
folder = "./data/placebo/basque/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1955:1997,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
t.interval = 1971:1980
df = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
df_original = reshape2::dcast(df[c("unit", "time", "gap_original")],
time ~ unit, value.var = "gap_original")
value.icc.sc = irr::icc(
df_original[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.sc = (nrow(df_original) - 1)*value.icc.sc + 1
DF.sc = (dim(df_original)[1]*dim(df_original)[2])/vif.sc
DF.sc
df_new = reshape2::dcast(df[c("unit", "time", "gap_new")],
time ~ unit, value.var = "gap_new")
value.icc.dsc = irr::icc(
df_new[,-1], model = "twoway",
type = "agreement", unit = "single"
)$value
vif.dsc = (nrow(df_new) - 1)*value.icc.dsc + 1
DF.dsc = (dim(df_new)[1]*dim(df_new)[2])/vif.dsc
var.sc = df %>% group_by(unit) %>%
summarise(variance = var(gap_original)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
var.dsc = df %>% group_by(unit) %>%
summarise(variance = var(gap_new)*(n.t - 1)) %>%
ungroup %>%
.[["variance"]] %>%
sum(., na.rm = T)/(n.datasets*(n.t - 1))
f.value = var.dsc/var.sc
f.value = round(f.value, 4)
f.value
p.value = pf(f.value, DF.dsc,
DF.sc, lower.tail = TRUE)
p.value
