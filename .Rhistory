coord_cartesian(ylim = c(-10, 0), xlim = c(0, 1)) +
xlab(expression(psi)) +
ylab("t") +
theme_bw() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
fig.sim = fig.big + annotation_custom(ggplotGrob(fig.small),
xmin = 5, xmax = 45,
ymin = 7, ymax = 30)
fig.sim
fig.big
ggsave(paste0("./figures/sim_ma06.pdf"),
fig.big, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
## Test result -----------------------------------------------------------------
folder = paste0("./data/res_sim/n20/")
file.list = as.list(list.files(folder))
length = 20
treat_time = 16
n_mse = 5
shock = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
treatment
length = 20
treat_time = 12
n_mse = 5
shock = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
treatment
0.15*length
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.15*length)),
rep(shock, round(0.85*length - treat_time)))
treatment
pre.start = 7
pre.end = 12
post.start = 13
post.end = 17
# de.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result = .x
grid.id = .y
value = result$res.synth.target.raw$value
synth.raw = result$res.synth.target.raw$synthetic
synth.TFDTW = result$res.synth.target.TFDTW$synthetic
gap.raw = value - synth.raw - treatment
gap.TFDTW = value - synth.TFDTW - treatment
data.frame(grid.id = grid.id,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
saveRDS(df.mse, paste0("./data/df.mse_sim_n20.Rds"))
# t.test for log(MSEdsc/MSEsc)
df.mse = readRDS(paste0("./data/df.mse_sim_n20.Rds"))
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw))
t.test(df.mse$log.ratio)
sum(df.mse$log.ratio<0)/nrow(df.mse)
wilcox.test(df.mse$log.ratio)
## Plot result -----------------------------------------------------------------
# df.gap
df.mse = readRDS(paste0("./data/df.mse_sim_n20.Rds"))
folder = paste0("./data/res_sim/n20/")
file.list = as.list(list.files(folder))
results = file.list %>%
future_map(
~{
file.name = .
readRDS(paste0(folder, file.name))
}
)
df.gap = NULL
for (i in 1:nrow(df.mse)) {
data.id = df.mse$data.id[i]
grid.id = df.mse$grid.id[i]
df.gap[[i]] = data.frame(
time = 1:20,
data.id = data.id,
grid.id = grid.id,
value = results[[data.id]][[grid.id]][["res.synth.target.raw"]][[1]],
synth.sc = results[[data.id]][[grid.id]][["res.synth.target.raw"]][[3]],
synth.dsc = results[[data.id]][[grid.id]][["res.synth.target.TFDTW"]][[3]]
)
print(i)
}
df.gap = df.gap %>%
do.call("rbind", .) %>%
mutate(
gap.sc = value - synth.sc,
gap.dsc = value - synth.dsc,
group = paste0(data.id, "-", grid.id)
)
saveRDS(df.gap, paste0("./data/df.gap_sim_n20.Rds"))
# plot
df.gap = readRDS(paste0("./data/df.gap_sim_n20.Rds"))
shock = 10
length = 20
treat_time = 12
n_mse = 5
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.15*length)),
rep(shock, round(0.85*length - treat_time)))
df.quantile = df.gap %>%
group_by(time) %>%
summarise(mean.sc = mean(gap.sc, na.rm = T),
mean.dsc = mean(gap.dsc, na.rm = T),
quantile.sc.975 = quantile(gap.sc, 0.975, na.rm = T),
quantile.sc.025 = quantile(gap.sc, 0.025, na.rm = T),
quantile.dsc.975 = quantile(gap.dsc, 0.975, na.rm = T),
quantile.dsc.025 = quantile(gap.dsc, 0.025, na.rm = T)) %>%
mutate(group = "quantile",
treatment = treatment)
View(df.quantile)
color.sc = "#2ab7ca"
color.dsc = "#fe4a49"
colors = c("TE" = "grey20",
"Avg. TE (SC)" = color.sc,
"Avg. TE (DSC)" = color.dsc)
linetypes = c("TE" = "solid",
"Avg. TE (SC)" = "dashed",
"Avg. TE (DSC)" = "dashed")
fills = c("95% Quantile (SC)" = color.sc,
"95% Quantile (DSC)" = color.dsc)
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
# annotate("rect", xmin = 61, xmax = 70,
#          ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = treatment, color = "TE", linetype = "TE"),
data = df.quantile, size = 1) +
geom_line(aes(x = time, y = mean.sc, color = "Avg. TE (SC)", linetype = "Avg. TE (SC)"),
data = df.quantile, size = 0.6) +
geom_line(aes(x = time, y = mean.dsc, color = "Avg. TE (DSC)", linetype = "Avg. TE (DSC)"),
data = df.quantile, size = 0.6) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
scale_linetype_manual(name = NULL, values = linetypes) +
geom_vline(xintercept = 12, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 11, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
# coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Treatment Effect (TE)") +
theme_bw() +
theme(legend.position=c(0.3,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig.big
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
# annotate("rect", xmin = 61, xmax = 70,
#          ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = treatment, color = "TE", linetype = "TE"),
data = df.quantile, size = 1) +
geom_line(aes(x = time, y = mean.sc, color = "Avg. TE (SC)", linetype = "Avg. TE (SC)"),
data = df.quantile, size = 0.6) +
geom_line(aes(x = time, y = mean.dsc, color = "Avg. TE (DSC)", linetype = "Avg. TE (DSC)"),
data = df.quantile, size = 0.6) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
scale_linetype_manual(name = NULL, values = linetypes) +
geom_vline(xintercept = 12, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 11, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Treatment Effect (TE)") +
theme_bw() +
theme(legend.position=c(0.3,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 12, xmax = 17,
ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = treatment, color = "TE", linetype = "TE"),
data = df.quantile, size = 1) +
geom_line(aes(x = time, y = mean.sc, color = "Avg. TE (SC)", linetype = "Avg. TE (SC)"),
data = df.quantile, size = 0.6) +
geom_line(aes(x = time, y = mean.dsc, color = "Avg. TE (DSC)", linetype = "Avg. TE (DSC)"),
data = df.quantile, size = 0.6) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
scale_linetype_manual(name = NULL, values = linetypes) +
geom_vline(xintercept = 12, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 11, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Treatment Effect (TE)") +
theme_bw() +
theme(legend.position=c(0.3,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig.big
ggsave(paste0("./figures/sim_n20.pdf"),
fig.big, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 12, xmax = 17,
ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = treatment, color = "TE", linetype = "TE"),
data = df.quantile, size = 1) +
geom_line(aes(x = time, y = mean.sc, color = "Avg. TE (SC)", linetype = "Avg. TE (SC)"),
data = df.quantile, size = 0.6) +
geom_line(aes(x = time, y = mean.dsc, color = "Avg. TE (DSC)", linetype = "Avg. TE (DSC)"),
data = df.quantile, size = 0.6) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
scale_linetype_manual(name = NULL, values = linetypes) +
geom_vline(xintercept = 12, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 11, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Treatment Effect (TE)") +
theme_bw() +
theme(legend.position=c(0.3,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
ggsave(paste0("./figures/sim_n20.pdf"),
fig.big, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
data.list = readRDS("./data/simul_data_beta1_ma06.Rds")
data.list[[3]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
#                             speed.upper = 2,
#                             speed.lower = 0.5,
#                             reweight = TRUE,
#                             rescale = TRUE,
#                             rescale.multiplier = 20,
#                             beta = beta)
# }
#
# saveRDS(data.list, paste0("./data/simul_data_beta1_ma06.Rds"))
#
data.list[[5]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
## Run -------------------------------------------------------------------------
data.list = readRDS("./data/simul_data_beta1_n20.Rds")
data.list[[15]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[25]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[35]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
View(data.list)
View(data.list[[2]])
(1:20)*5
set.seed(20220407)
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 100
n = 10
beta = 1
shock = 10
# simulate
data.list = NULL
for (i in 1:n.simulation) {
data.sim = sim.data(n = n, length = length,
t.treat = 60, shock = shock, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
treat.last = 0.15,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 10,
beta = beta)
data.list[[i]] = data.sim %>%
filter(time %in% c((1:20)*5)) %>%
group_by(unit) %>%
mutate(time = 1:20) %>%
ungroup
}
data.list[[35]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[15]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[30]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[1]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[12]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
set.seed(20220407)
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 100
n = 10
beta = 1
shock = 10
# simulate
data.list = NULL
for (i in 1:n.simulation) {
data.sim = sim.data(n = n, length = length,
t.treat = 60, shock = shock, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
treat.last = 0.15,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 10,
beta = beta)
data.list[[i]] = data.sim %>%
filter(time %in% c((1:20)*5)) %>%
group_by(unit) %>%
mutate(time = 1:20) %>%
ungroup
}
saveRDS(data.list, paste0("./data/simul_data_n20.Rds"))
