# value.min = scales$value.min
multiplier = scales$multiplier
# value.true = task$res.synth.TFDTW$value/multiplier + value.min
# value.sc = task$res.synth.raw$synthetic/multiplier + value.min
# value.dsc = task$res.synth.TFDTW$synthetic/multiplier + value.min
# gap.raw = value.true - value.true
# gap.TFDTW = value.dsc - value.sc
gap.raw = task$gap.raw*1000/multiplier
gap.TFDTW = task$gap.TFDTW*1000/multiplier
###
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
View(df.rescale)
df.mse.bak = df.mse
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
View(df.mse)
res.aov = aov(log.ratio ~ data.id*unit, df.mse)
summary.aov = summary(res.aov)
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
EMS = summary.aov[[1]]$`Mean Sq`[3]
n = summary.aov[[1]]$`Df`[1] + 1
k = summary.aov[[1]]$`Df`[2] + 1
res.icc = (BMS - EMS)/(BMS + (k - 1)*EMS + k*(JMS - EMS)/n)
res.vif = 1 + (k - 1)*res.icc
DF = nrow(df.mse)/res.vif
t.value = t.test(df.mse$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value
saveRDS(df.mse, "./data/df.mse_basque2.Rds")
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/placebo/basque/res_basque_1.Rds")
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/placebo/basque/res_basque_1204_2.Rds")
target = "Basque Country (Pais Vasco)"
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
target = "Basque Country (Pais Vasco)"
scales = df.rescale %>% filter(unit == target)
scales
multiplier = scales$multiplier
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
mse = future_map2(
results.target,
as.list(names(results.target)),
~{
result.synth = .x[["results.TFDTW.synth"]][[target]]
grid.id = .y
gap.raw = result.synth$gap.raw*1000/multiplier
gap.TFDTW = result.synth$gap.TFDTW*1000/multiplier
data.frame(grid.id = grid.id,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
opt.grid.id = mse %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id) %>%
.[["grid.id"]]
opt.grid.id
mse
multiplier
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/res_basque_1.Rds")
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/placebo/basque/res_basque_1.Rds")
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/placebo/basque/res_basque_1204_1.Rds")
target = "Basque Country (Pais Vasco)"
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
mse = future_map2(
results.target,
as.list(names(results.target)),
~{
result.synth = .x[["results.TFDTW.synth"]][[target]]
grid.id = .y
gap.raw = result.synth$gap.raw
gap.TFDTW = result.synth$gap.TFDTW
data.frame(grid.id = grid.id,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
View(mse)
scales = df.rescale %>% filter(unit == target)
multiplier = scales$multiplier
scales
multiplier
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/placebo/basque/res_basque_1204_1.Rds")
target = "Basque Country (Pais Vasco)"
scales = df.rescale %>% filter(unit == target)
multiplier = scales$multiplier
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
mse = future_map2(
results.target,
as.list(names(results.target)),
~{
result.synth = .x[["results.TFDTW.synth"]][[target]]
grid.id = .y
gap.raw = result.synth$gap.raw*1000/multiplier
gap.TFDTW = result.synth$gap.TFDTW*1000/multiplier
data.frame(grid.id = grid.id,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
opt.grid.id = mse %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id) %>%
.[["grid.id"]]
opt.grid.id
opt.grid.id = mse %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id) %>%
.[["grid.id"]]
df.target = data.frame(
time = 1955:1997,
unit = target,
data.id = 0,
grid.id = opt.grid.id,
value = results.target[[opt.grid.id]][[4]][[target]][[3]][["value"]],
synth.sc = results.target[[opt.grid.id]][[4]][[target]][[3]][["synthetic"]],
synth.dsc = results.target[[opt.grid.id]][[4]][[target]][[4]][["synthetic"]]
)
df.target = df.target %>%
mutate(
gap.sc = (value - synth.sc)*1000/multiplier,
gap.dsc = (value - synth.dsc)*1000/multiplier,
group = paste0(data.id, "-", grid.id, "-", unit)
)
View(df.target)
saveRDS(df.target, "./data/df.target_basque2.Rds")
# df.gap
df.mse = readRDS("./data/df.mse_basque2.Rds")
folder = "./data/placebo/basque/"
# df.gap
df.mse = readRDS("./data/df.mse_basque2.Rds")
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
results = file.list %>%
future_map(
~{
file.name = .
readRDS(paste0(folder, file.name))
}
)
df.gap = NULL
for (i in 1:nrow(df.mse)) {
unit = df.mse$unit[i]
data.id = df.mse$data.id[i]
grid.id = df.mse$grid.id[i]
scales = df.rescale %>% filter(unit == df.mse$unit[i])
value.min = scales$value.min
multiplier = scales$multiplier
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]]
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]]
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
df.gap[[i]] = data.frame(
time = 1955:1997,
unit = unit,
data.id = data.id,
grid.id = grid.id,
value = value*1000/multiplier + value.min,
synth.sc = synth.sc*1000/multiplier + value.min,
synth.dsc = synth.dsc*1000/multiplier + value.min
)
print(i)
}
i
value
# df.gap
df.mse = readRDS("./data/df.mse_basque2.Rds")
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
results = file.list %>%
future_map(
~{
file.name = .
readRDS(paste0(folder, file.name))
}
)
df.gap = NULL
i = 1
unit = df.mse$unit[i]
unit
data.id = df.mse$data.id[i]
grid.id = df.mse$grid.id[i]
scales = df.rescale %>% filter(unit == df.mse$unit[i])
value.min = scales$value.min
multiplier = scales$multiplier
scales
value.min
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]]
value
results[[data.id]]
View(results)
data.id
data.id = as.numeric(df.mse$data.id[i])
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]]
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]]
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
synth.sc
value
df.gap = NULL
for (i in 1:nrow(df.mse)) {
unit = df.mse$unit[i]
data.id = as.numeric(df.mse$data.id[i])
grid.id = df.mse$grid.id[i]
scales = df.rescale %>% filter(unit == df.mse$unit[i])
value.min = scales$value.min
multiplier = scales$multiplier
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]]
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]]
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
df.gap[[i]] = data.frame(
time = 1955:1997,
unit = unit,
data.id = data.id,
grid.id = grid.id,
value = value*1000/multiplier + value.min,
synth.sc = synth.sc*1000/multiplier + value.min,
synth.dsc = synth.dsc*1000/multiplier + value.min
)
print(i)
}
i
unit = df.mse$unit[i]
data.id = as.numeric(df.mse$data.id[i])
grid.id = df.mse$grid.id[i]
scales = df.rescale %>% filter(unit == df.mse$unit[i])
value.min = scales$value.min
multiplier = scales$multiplier
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]]
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]]
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
df.gap[[i]] = data.frame(
time = 1955:1997,
unit = unit,
data.id = data.id,
grid.id = grid.id,
value = value*1000/multiplier + value.min,
synth.sc = synth.sc*1000/multiplier + value.min,
synth.dsc = synth.dsc*1000/multiplier + value.min
)
df.gap = NULL
for (i in 1:nrow(df.mse)) {
unit = df.mse$unit[i]
data.id = as.numeric(df.mse$data.id[i])
grid.id = df.mse$grid.id[i]
scales = df.rescale %>% filter(unit == df.mse$unit[i])
value.min = scales$value.min
multiplier = scales$multiplier
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]]
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]]
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
df.gap[[i]] = data.frame(
time = 1955:1997,
unit = unit,
data.id = data.id,
grid.id = grid.id,
value = value*1000/multiplier + value.min,
synth.sc = synth.sc*1000/multiplier + value.min,
synth.dsc = synth.dsc*1000/multiplier + value.min
)
print(i)
}
df.gap = df.gap %>%
do.call("rbind", .) %>%
mutate(
gap.sc = value - synth.sc,
gap.dsc = value - synth.dsc,
group = paste0(data.id, "-", grid.id, "-", unit)
)
saveRDS(df.gap, "./data/df.gap_basque2.Rds")
avg.mse.sc = mean(df.mse$mse.postT.raw, na.rm = TRUE)
avg.mse.dsc = mean(df.mse$mse.postT.TFDTW, na.rm = TRUE)
avg.mse.sc
avg.mse.dsc
# plot
df.target = readRDS("./data/df.target_basque2.Rds")
df.gap = readRDS("./data/df.gap_basque2.Rds")
df.quantile = df.gap %>%
group_by(time) %>%
summarise(quantile.sc.975 = quantile(gap.sc, 0.975, na.rm = T),
quantile.sc.025 = quantile(gap.sc, 0.025, na.rm = T),
quantile.dsc.975 = quantile(gap.dsc, 0.975, na.rm = T),
quantile.dsc.025 = quantile(gap.dsc, 0.025, na.rm = T)) %>%
mutate(group = "quantile")
color.sc = "#2ab7ca"
color.dsc = "#fe4a49"
colors = c("TE (SC)" = color.sc,
"TE (DSC)" = color.dsc)
fills = c("95% Quantile (SC)" = color.sc,
"95% Quantile (DSC)" = color.dsc)
set.seed(20230812)
group.sample = sample(unique(df.gap$group), 100)
fig_basque = df.gap %>%
filter(group %in% group.sample) %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 1970, xmax = 1980,
ymin = -3, ymax = 3, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha = 0.4) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha = 0.4) +
geom_ribbon(aes(ymin = quantile.sc.025,
ymax = quantile.sc.975,
fill="95% Quantile (SC)"),
data = df.quantile, alpha=0.5) +
geom_ribbon(aes(ymin = quantile.dsc.025,
ymax = quantile.dsc.975,
fill="95% Quantile (DSC)"),
data = df.quantile, alpha=0.5) +
geom_line(aes(y = gap.sc, color = "TE (SC)"),
data = df.target, size = 1) +
geom_line(aes(y = gap.dsc, color = "TE (DSC)"),
data = df.target, size = 1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 1970, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 1975, y = 0.85,
label = "t = -7.6121\nP < 0.0001", col = "grey20") +
annotate("text", x = 1969, y = 0.6, angle = 90,
label = "Treatment", col = "grey20") +
# annotate("text", x = 1960, y = -0.5, label = "bar(MSE)[SC]==0.0469", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
# annotate("text", x = 1960, y = -0.8, label = "bar(MSE)[DSC]==0.032", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
coord_cartesian(xlim=c(1950, 1990), ylim = c(-1, 1)) +
xlab("Year") +
ylab("TE(y - Synthetic Control)") +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig_basque
fig_basque = df.gap %>%
filter(group %in% group.sample) %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 1970, xmax = 1980,
ymin = -3, ymax = 3, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha = 0.4) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha = 0.4) +
geom_ribbon(aes(ymin = quantile.sc.025,
ymax = quantile.sc.975,
fill="95% Quantile (SC)"),
data = df.quantile, alpha=0.5) +
geom_ribbon(aes(ymin = quantile.dsc.025,
ymax = quantile.dsc.975,
fill="95% Quantile (DSC)"),
data = df.quantile, alpha=0.5) +
geom_line(aes(y = gap.sc, color = "TE (SC)"),
data = df.target, size = 1) +
geom_line(aes(y = gap.dsc, color = "TE (DSC)"),
data = df.target, size = 1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 1970, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 1975, y = 0.85,
label = "t = -7.6121\nP < 0.0001", col = "grey20") +
annotate("text", x = 1969, y = 0.6, angle = 90,
label = "Treatment", col = "grey20") +
# annotate("text", x = 1960, y = -0.5, label = "bar(MSE)[SC]==0.0469", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
# annotate("text", x = 1960, y = -0.8, label = "bar(MSE)[DSC]==0.032", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
# coord_cartesian(xlim=c(1950, 1990), ylim = c(-1, 1)) +
xlab("Year") +
ylab("TE(y - Synthetic Control)") +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig_basque
fig_basque = df.gap %>%
filter(group %in% group.sample) %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 1970, xmax = 1980,
ymin = -2000, ymax = 2000, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha = 0.4) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha = 0.4) +
geom_ribbon(aes(ymin = quantile.sc.025,
ymax = quantile.sc.975,
fill="95% Quantile (SC)"),
data = df.quantile, alpha=0.5) +
geom_ribbon(aes(ymin = quantile.dsc.025,
ymax = quantile.dsc.975,
fill="95% Quantile (DSC)"),
data = df.quantile, alpha=0.5) +
geom_line(aes(y = gap.sc, color = "TE (SC)"),
data = df.target, size = 1) +
geom_line(aes(y = gap.dsc, color = "TE (DSC)"),
data = df.target, size = 1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 1970, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 1975, y = 850,
label = "t = -7.6121\nP < 0.0001", col = "grey20") +
annotate("text", x = 1969, y = 600, angle = 90,
label = "Treatment", col = "grey20") +
# annotate("text", x = 1960, y = -0.5, label = "bar(MSE)[SC]==0.0469", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
# annotate("text", x = 1960, y = -0.8, label = "bar(MSE)[DSC]==0.032", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
coord_cartesian(xlim=c(1950, 1990), ylim = c(-1200, 1200)) +
xlab("Year") +
ylab("TE(y - Synthetic Control)") +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig_basque = df.gap %>%
filter(group %in% group.sample) %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 1970, xmax = 1980,
ymin = -2000, ymax = 2000, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha = 0.4) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha = 0.4) +
geom_ribbon(aes(ymin = quantile.sc.025,
ymax = quantile.sc.975,
fill="95% Quantile (SC)"),
data = df.quantile, alpha=0.5) +
geom_ribbon(aes(ymin = quantile.dsc.025,
ymax = quantile.dsc.975,
fill="95% Quantile (DSC)"),
data = df.quantile, alpha=0.5) +
geom_line(aes(y = gap.sc, color = "TE (SC)"),
data = df.target, size = 1) +
geom_line(aes(y = gap.dsc, color = "TE (DSC)"),
data = df.target, size = 1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 1970, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 1975, y = 850,
label = "t = -7.6121\nP < 0.0001", col = "grey20") +
annotate("text", x = 1969, y = 600, angle = 90,
label = "Treatment", col = "grey20") +
# annotate("text", x = 1960, y = -0.5, label = "bar(MSE)[SC]==0.0469", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
# annotate("text", x = 1960, y = -0.8, label = "bar(MSE)[DSC]==0.032", parse = TRUE,
#          col = "grey20", size = 4, fontface = "bold") +
coord_cartesian(xlim=c(1950, 1990), ylim = c(-1200, 1200)) +
xlab("Year") +
ylab("TE(y - Synthetic Control)") +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig_basque
# t.test for log(MSEdsc/MSEsc)
df.mse = readRDS("./data/df.mse_basque2.Rds")
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
res.aov = aov(log.ratio ~ data.id*unit, df.mse)
summary.aov = summary(res.aov)
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
EMS = summary.aov[[1]]$`Mean Sq`[3]
n = summary.aov[[1]]$`Df`[1] + 1
k = summary.aov[[1]]$`Df`[2] + 1
res.icc = (BMS - EMS)/(BMS + (k - 1)*EMS + k*(JMS - EMS)/n)
res.vif = 1 + (k - 1)*res.icc
DF = nrow(df.mse)/res.vif
t.value = t.test(df.mse$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value
