)
df.gap = NULL
for (i in 1:nrow(df.mse)) {
unit = df.mse$unit[i]
data.id = df.mse$data.id[i]
grid.id = df.mse$grid.id[i]
df.gap[[i]] = data.frame(
time = 1960:2003,
unit = unit,
data.id = data.id,
grid.id = grid.id,
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]],
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]],
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
)
print(i)
}
df.gap = df.gap %>%
do.call("rbind", .) %>%
mutate(
gap.sc = value - synth.sc,
gap.dsc = value - synth.dsc,
group = paste0(data.id, "-", grid.id, "-", unit)
)
saveRDS(df.gap, "./data/df.gap_germany_pred.Rds")
# plot
set.seed(20230901)
df.target = readRDS("./data/df.target_germany_pred.Rds")
df.gap = readRDS("./data/df.gap_germany_pred.Rds")
df.quantile = df.gap %>%
group_by(time) %>%
summarise(quantile.sc.975 = quantile(gap.sc, 0.975, na.rm = T),
quantile.sc.025 = quantile(gap.sc, 0.025, na.rm = T),
quantile.dsc.975 = quantile(gap.dsc, 0.975, na.rm = T),
quantile.dsc.025 = quantile(gap.dsc, 0.025, na.rm = T)) %>%
mutate(group = "quantile")
color.sc = "#2ab7ca"
color.dsc = "#fe4a49"
colors = c("Target TE (SC)" = color.sc,
"Target TE (DSC)" = color.dsc)
fills = c("95% Quantile (SC)" = color.sc,
"95% Quantile (DSC)" = color.dsc)
set.seed(20230812)
group.sample = sample(unique(df.gap$group), 100)
fig.placebo = df.gap %>%
filter(group %in% group.sample) %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 1990, xmax = 2000,
ymin = -9000, ymax = 9000, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha = 0.4) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha = 0.4) +
geom_ribbon(aes(ymin = quantile.sc.025,
ymax = quantile.sc.975,
fill="95% Quantile (SC)"),
data = df.quantile, alpha=0.5) +
geom_ribbon(aes(ymin = quantile.dsc.025,
ymax = quantile.dsc.975,
fill="95% Quantile (DSC)"),
data = df.quantile, alpha=0.5) +
geom_line(aes(y = gap.sc, color = "Target TE (SC)"),
data = df.target, size = 1) +
geom_line(aes(y = gap.dsc, color = "Target TE (DSC)"),
data = df.target, size = 1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 1990, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 1995, y = 6800,
label = "t = -4.0951\nP < 0.0001", col = "grey20") +
annotate("text", x = 1989, y = 4800, angle = 90,
label = "Treatment", col = "grey20") +
coord_cartesian(xlim=c(1970, 2010),ylim=c(-8000,8000)) +
xlab("Year") +
ylab("Treatment Effect") +
theme_bw() +
theme(legend.position = c(0.25, 0.2),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig.placebo
fig.germany = fig.placebo
## Placebo ---------------------------------------------------------------------
folder = "./data/pred/basque/"
file.list = as.list(list.files(folder))
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
# df.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
## Placebo ---------------------------------------------------------------------
folder = "./data/pred/basque/"
file.list = as.list(list.files(folder))
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
# df.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
saveRDS(df.mse, "./data/df.mse_basque_pred.Rds")
# t.test for log(MSEdsc/MSEsc)
df.mse = readRDS("./data/df.mse_basque_pred.Rds")
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
res.aov = aov(log.ratio ~ data.id*unit, df.mse)
summary.aov = summary(res.aov)
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
EMS = summary.aov[[1]]$`Mean Sq`[3]
n = summary.aov[[1]]$`Df`[1] + 1
k = summary.aov[[1]]$`Df`[2] + 1
res.icc = (BMS - EMS)/(BMS + (k - 1)*EMS + k*(JMS - EMS)/n)
res.vif = 1 + (k - 1)*res.icc
DF = nrow(df.mse)/res.vif
t.value = t.test(df.mse$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value
## Plot results ----------------------------------------------------------------
# df.target
results.target = readRDS("./data/pred/basque/res_basque_1.Rds")
target = "Basque Country (Pais Vasco)"
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
mse = future_map2(
results.target,
as.list(names(results.target)),
~{
result.synth = .x[["results.TFDTW.synth"]][[target]]
grid.id = .y
gap.raw = result.synth$gap.raw
gap.TFDTW = result.synth$gap.TFDTW
data.frame(grid.id = grid.id,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
opt.grid.id = mse %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id) %>%
.[["grid.id"]]
df.target = data.frame(
time = 1955:1997,
unit = target,
data.id = 0,
grid.id = opt.grid.id,
value = results.target[[opt.grid.id]][[4]][[target]][[3]][["value"]],
synth.sc = results.target[[opt.grid.id]][[4]][[target]][[3]][["synthetic"]],
synth.dsc = results.target[[opt.grid.id]][[4]][[target]][[4]][["synthetic"]]
)
df.target = df.target %>%
mutate(
gap.sc = value - synth.sc,
gap.dsc = value - synth.dsc,
group = paste0(data.id, "-", grid.id, "-", unit)
)
saveRDS(df.target, "./data/df.target_basque_pred.Rds")
# df.gap
df.mse = readRDS("./data/df.mse_basque_pred.Rds")
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
results = file.list %>%
future_map(
~{
file.name = .
readRDS(paste0(folder, file.name))
}
)
df.gap = NULL
for (i in 1:nrow(df.mse)) {
unit = df.mse$unit[i]
data.id = df.mse$data.id[i]
grid.id = df.mse$grid.id[i]
df.gap[[i]] = data.frame(
time = 1955:1997,
unit = unit,
data.id = data.id,
grid.id = grid.id,
value = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["value"]],
synth.sc = results[[data.id]][[grid.id]][[4]][[unit]][[3]][["synthetic"]],
synth.dsc = results[[data.id]][[grid.id]][[4]][[unit]][[4]][["synthetic"]]
)
print(i)
}
(1:3)+1
(1:10)*10-9
c((1:9)*10-9, (1:9)*10-8)
setdiff(1:100, c((1:9)*10-9, (1:9)*10-8))
original_vector = setdiff(1:100, c((1:9)*10-9, (1:9)*10-8))
# Create an index to group every four elements
group_index <- ceiling(seq_along(original_vector) / 4)
# Split the original vector into a list of vectors, each containing 4 elements
list_of_vectors <- split(original_vector, group_index)
list_of_vectors
original_vector = setdiff(1:100, c((1:9)*10-9, (1:9)*10-8))
# Create an index to group every four elements
group_index <- ceiling(seq_along(original_vector) / 4)
# Split the original vector into a list of vectors, each containing 4 elements
task_list <- split(original_vector, group_index)
task_id = 15
task_list[[task_id]]
70000*.2
62163*.2
62163*1.2
68616*1.2
## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
library(tidyverse)
library(furrr)
plan(multisession, workers = 7)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/simulate.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
## 3. Placebo Test -------------------------------------------------------------
fig_basque = readRDS("./data/placebo_basque_pred.Rds")
fig_basque
## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
## 3. Placebo Test -------------------------------------------------------------
fig_basque = readRDS("./data/placebo_basque_pred.Rds")
fig_basque
fig_tobacco = readRDS("./data/placebo_tobacco_pred.Rds")
fig_tobacco
## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/simulate.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
set.seed(20220407)
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 100
n = 10
beta = 1
shock = 10
# simulate
data.list = NULL
for (i in 1:n.simulation) {
data.list[[i]] = sim.data(n = n, length = length,
t.treat = 60, shock = shock,
arima.order = c(1,1,1),
ar.x = 0.6, ma.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = beta)
}
saveRDS(data.list, paste0("./data/simul_data_arima111.Rds"))
data.list[[5]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list[[56]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
task_id = 1
(task_id*10-9):task_id*10
(task_id*10-9):(task_id*10)
task_id = 8
(task_id*10-9):(task_id*10)
task_id = 10
(task_id*10-9):(task_id*10)
