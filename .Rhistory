mse.sc = mean(diff_new^2))
log.ratio = log(res$mse.dsc/res$mse.sc)
log.ratio2 = log(res2$mse.dsc/res2$mse.sc)
res = df %>%
group_by(id) %>%
summarise(mse.dsc = mean(diff.dsc^2),
mse.sc = mean(diff.sc^2))
res2 = df2 %>%
group_by(id) %>%
summarise(mse.dsc = mean(diff_original^2),
mse.sc = mean(diff_new^2))
log.ratio = log(res$mse.dsc/res$mse.sc)
log.ratio2 = log(res2$mse.dsc/res2$mse.sc)
res2 = df2 %>%
group_by(id) %>%
summarise(mse.dsc = mean(diff_new^2),
mse.sc = mean(diff_original^2))
log.ratio = log(res$mse.dsc/res$mse.sc)
log.ratio2 = log(res2$mse.dsc/res2$mse.sc)
log.ratio == log.ratio2
t.test(log.ratio)
res = df %>%
group_by(id) %>%
summarise(mse.dsc = mean(diff.dsc^2, na.rm = T),
mse.sc = mean(diff.sc^2, na.rm = T))
res2 = df2 %>%
group_by(id) %>%
summarise(mse.dsc = mean(diff_new^2, na.rm = T),
mse.sc = mean(diff_original^2, na.rm = T))
log.ratio = log(res$mse.dsc/res$mse.sc)
log.ratio2 = log(res2$mse.dsc/res2$mse.sc)
t.test(log.ratio)
res1 = res
View(res1)
results = NULL
beta = 1
folder = "./data/res_sim/1006/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
ind = ind.max.neg.ratio[ind.min.p.value[1]]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
# df = data.frame(time = 0:(length(value_raw)-1),
#                 id = id,
#                 synth.sc = synth_original,
#                 synth.dsc = synth_new,
#                 value = value_raw,
#                 treatment = causal_effect),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
# log(mse/mse) t test ==========================================
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
View(mse)
View(res)
a = res[[1]]$df
b = res[[1]]$mse
View(a)
(treat_time + 1):(treat_time + n_mse)
mse_original = mean(a$diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(a$diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
View(b)
mse_original
mse_new
a$diff_original[(treat_time + 1):(treat_time + n_mse)]
a$diff_new[(treat_time + 1):(treat_time + n_mse)]
View(a)
treat_time
df <- readRDS('./data/sim_beta_1.Rds')
# limit to period of interest
df <- df[df$time>=60 & df$time <70, ]
# calculate squared errors
df$e.sc <- (df$value - df$synth.sc - df$treatment)^2
df$e.dsc <- (df$value - df$synth.dsc - df$treatment)^2
# mean squared errors per id
mses <- aggregate(df, by=list(df$id), FUN=mean )
# t.test of pairwise MSEs
t.test( mses$e.dsc- mses$e.sc )
# t.test log(mse/mse)
mseRatio <- mses$e.dsc / mses$e.sc
t.test( log(mseRatio) )
results = NULL
beta = 1
folder = "./data/res_sim/1011/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
item = results[[1]]
View(item)
mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
filter(unit == "A") %>% .[["mse.preT.TFDTW"]]
mse.pre
se.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
filter(unit == "A") %>% .[["mse.preT.TFDTW"]]
ind = which(mse.pre == min(mse.pre, na.rm = T))[1]
mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
filter(unit == "A") %>% .[["mse.preT.TFDTW"]]
ind = which(mse.pre == min(mse.pre, na.rm = T))[1]
mse.pre[ind]
mse.pre
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# ind = ind.max.neg.ratio[ind.min.p.value[1]]
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
filter(unit == "A") %>% .[["mse.preT.TFDTW"]]
ind = which(mse.pre == min(mse.pre, na.rm = T))[1]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
# df = data.frame(time = 0:(length(value_raw)-1),
#                 id = id,
#                 synth.sc = synth_original,
#                 synth.dsc = synth_new,
#                 value = value_raw,
#                 treatment = causal_effect),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
# log(mse/mse) t test ==========================================
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
View(mse)
results = NULL
beta = 1
folder = "./data/res_sim/1010/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# ind = ind.max.neg.ratio[ind.min.p.value[1]]
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
filter(unit == "A") %>% .[["mse.preT.TFDTW"]]
ind = which(mse.pre == min(mse.pre, na.rm = T))[1]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
# df = data.frame(time = 0:(length(value_raw)-1),
#                 id = id,
#                 synth.sc = synth_original,
#                 synth.dsc = synth_new,
#                 value = value_raw,
#                 treatment = causal_effect),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
# log(mse/mse) t test ==========================================
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
results = NULL
beta = 1
folder = "./data/res_sim/1006/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# ind = ind.max.neg.ratio[ind.min.p.value[1]]
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
filter(unit == "A") %>% .[["mse.preT.TFDTW"]]
ind = which(mse.pre == min(mse.pre, na.rm = T))[1]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
# df = data.frame(time = 0:(length(value_raw)-1),
#                 id = id,
#                 synth.sc = synth_original,
#                 synth.dsc = synth_new,
#                 value = value_raw,
#                 treatment = causal_effect),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
# log(mse/mse) t test ==========================================
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
View(mse)
results = NULL
folder = "./data/placebo/basque/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
item = results[[1]]
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
View(mse)
units = unique(mse$unit)
i = 1
target = units[[i]]
# scores = mse %>%
#   filter(unit != target) %>%
#   group_by(id) %>%
#   summarise(percent = mean(log.ratio < 0),
#             p.value = t.test(log.ratio)$p.value)
# max.percent = which(scores$percent == max(scores$percent))
# min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
# opt.ind = as.numeric(scores$id[max.percent[min.p]])
scores = mse %>%
filter(unit == target)
View(scores)
which(scores$mse.preT.TFDTW == min(scores$mse.preT.TFDTW))
scores$id[which(scores$mse.preT.TFDTW == min(scores$mse.preT.TFDTW))[1]]
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
# scores = mse %>%
#   filter(unit != target) %>%
#   group_by(id) %>%
#   summarise(percent = mean(log.ratio < 0),
#             p.value = t.test(log.ratio)$p.value)
# max.percent = which(scores$percent == max(scores$percent))
# min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
# opt.ind = as.numeric(scores$id[max.percent[min.p]])
scores = mse %>%
filter(unit == target)
opt.ind = as.numeric(scores$id[which(scores$mse.preT.TFDTW == min(scores$mse.preT.TFDTW))[1]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1955:1997,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = data.frame(
#   time = 1955:1997,
#   id = paste0("d", index, "-", target),
#   synth.sc = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$synthetic,
#   synth.dsc = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.TFDTW$synthetic,
#   value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value
# )
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
t.interval = 1971:1980
df = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
df2 = df %>%
group_by(unit) %>%
summarise(mse.sc = mean(gap_original^2, na.rm = TRUE),
mse.dsc = mean(gap_new^2, na.rm = TRUE)) %>%
mutate(log.ratio = log(mse.dsc/mse.sc),
id = factor(str_split(unit, "-", simplify = TRUE)[,1]),
target = factor(str_split(unit, "-", simplify = TRUE)[,2]))
res.aov = aov(log.ratio ~ id*target, df2)
summary.aov = summary(res.aov)
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
EMS = summary.aov[[1]]$`Mean Sq`[3]
n = 118
k = 17
res.icc = (BMS - EMS)/(BMS + (k - 1)*EMS + k*(JMS - EMS)/n)
res.vif = 1 + (k - 1)*res.icc
DF = nrow(df2)/res.vif
t.value = t.test(df2$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
DF
p.value
View(df2)
t.test(df2$log.ratio)
DF
