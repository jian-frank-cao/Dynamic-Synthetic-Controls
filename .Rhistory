rep(shock, round(0.9*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
phi
i = 2
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
phi
i = 3
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
phi
?dcast
?reshape2::dcast
reshape2::dcast(data, value ~ unit)
reshape2::dcast(data, unit + time ~ value)
reshape2::dcast(data, value ~ time)
reshape2::dcast(data, time ~ unit)
df = reshape2::dcast(data, time ~ unit)
model = lm(A ~ B + C, data = df %>% filter(time < 12))
summary(model)
summary(model)
A.predict = predict(model, df[,3:4])
A.predict
plot(ts(df$A))
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, A.predict, col = "red")
model1 = lm(A ~ B + C, data = df %>% filter(time < 12))
A.predict1 = predict(model1, df[,3:4])
model2 = lm(A ~ B + C + B.sq + C.sq, data = df %>% filter(time < 12))
A.predict2 = predict(model2, df[,3:6])
df = reshape2::dcast(data, time ~ unit)
df = df %>%
mutate(B.sq = B^2,
C.sq = C^2)
model1 = lm(A ~ B + C, data = df %>% filter(time < 12))
A.predict1 = predict(model1, df[,3:4])
model2 = lm(A ~ B + C + B.sq + C.sq, data = df %>% filter(time < 12))
A.predict2 = predict(model2, df[,3:6])
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, A.predict1, col = "red")
lines(1:20, A.predict2, col = "orange")
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 5, match.method = "open.end",
dist.quant = 0.95,
window.type = "sakoechiba",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(list(dep.var, 9:11, c("mean")),
list(dep.var, 6:8, c("mean")),
list(dep.var, 3:5, c("mean")))),
time.predictors.prior = 1:11,
time.optimize.ssr = 1:11)
args.TFDTW.synth = list(start.time = 1, end.time = 20, treat.time = 12,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 5,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.7))
args.TFDTW.synth.all.units = list(target = "A",
data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
all.units.parallel = FALSE)
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
filter.width.range = filter.width.range
k.range = k.range
step.pattern.range = step.pattern.range
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units
grid.search.parallel = grid.search.parallel
if (grid.search.parallel) {
fun.map = furrr::future_map
}else{
fun.map = purrr::map
}
# vanilla synthetic control
data = args.TFDTW.synth.all.units[["data"]]
units = data[c("id", "unit")] %>% distinct
units.list = units %>% split(., seq(nrow(units)))
args.synth = args.TFDTW.synth.all.units$args.TFDTW.synth$args.synth
args.synth[["df"]] = data
args.synth[["dep.var"]] = "value_raw"
res.synth.raw.list = units.list %>%
set_names(units$unit) %>%
fun.map(
~{
item = .
dependent.id = item$id
args.synth[["dependent.id"]] = dependent.id
res = do.call(do.synth, args.synth)
}
)
# grid search space
search.grid = expand.grid(filter.width.range, k.range,
names(step.pattern.range)) %>%
`colnames<-`(c("filter.width", "k", "step.pattern"))
search.grid.list = search.grid %>% split(., seq(nrow(search.grid)))
# grid search space
search.grid = expand.grid(filter.width.range, k.range,
names(step.pattern.range)) %>%
`colnames<-`(c("filter.width", "k", "step.pattern"))
search.grid.list = search.grid %>% split(., seq(nrow(search.grid)))
results = NULL
for (i in 1:length(search.grid.list)) {
print(i)
task = search.grid.list[[i]]
args.TFDTW.synth.all.units[["filter.width"]] = task$filter.width
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["k"]] = task$k
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["step.pattern1"]] =
step.pattern.range[[task$step.pattern]]
args.TFDTW.synth.all.units[["res.synth.raw.list"]] = res.synth.raw.list
results[[i]] = do.call(TFDTW.synth.all.units, args.TFDTW.synth.all.units)
}
i
View(results)
View(results[[1]][["mse"]])
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, lm.predict1, col = "red")
model1 = lm(A ~ B + C, data = df %>% filter(time < 12))
lm.predict1 = predict(model1, df[,3:4])
model2 = lm(A ~ B + C + B.sq + C.sq, data = df %>% filter(time < 12))
lm.predict2 = predict(model2, df[,3:6])
lines(1:20, lm.predict1, col = "red")
lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[1]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[1]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, lm.predict1, col = "red")
lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[2]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[2]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, lm.predict1, col = "red")
lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[3]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[3]]$res.synth.target.TFDTW$synthetic, col = "pink")
i
for (i in 47:length(search.grid.list)) {
print(i)
task = search.grid.list[[i]]
args.TFDTW.synth.all.units[["filter.width"]] = task$filter.width
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["k"]] = task$k
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["step.pattern1"]] =
step.pattern.range[[task$step.pattern]]
args.TFDTW.synth.all.units[["res.synth.raw.list"]] = res.synth.raw.list
results[[i]] = do.call(TFDTW.synth.all.units, args.TFDTW.synth.all.units)
}
i
for (i in 48:length(search.grid.list)) {
print(i)
task = search.grid.list[[i]]
args.TFDTW.synth.all.units[["filter.width"]] = task$filter.width
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["k"]] = task$k
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["step.pattern1"]] =
step.pattern.range[[task$step.pattern]]
args.TFDTW.synth.all.units[["res.synth.raw.list"]] = res.synth.raw.list
results[[i]] = do.call(TFDTW.synth.all.units, args.TFDTW.synth.all.units)
}
for (i in 49:length(search.grid.list)) {
print(i)
task = search.grid.list[[i]]
args.TFDTW.synth.all.units[["filter.width"]] = task$filter.width
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["k"]] = task$k
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["step.pattern1"]] =
step.pattern.range[[task$step.pattern]]
args.TFDTW.synth.all.units[["res.synth.raw.list"]] = res.synth.raw.list
results[[i]] = do.call(TFDTW.synth.all.units, args.TFDTW.synth.all.units)
}
search.grid.list[[46]]
search.grid.list[[47]]
search.grid.list[[45]]
(1:9)*2+3
filter.width.range = (1:3)*2+3
k.range = 4:7
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 5, match.method = "open.end",
dist.quant = 0.95,
window.type = "sakoechiba",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(list(dep.var, 9:11, c("mean")),
list(dep.var, 6:8, c("mean")),
list(dep.var, 3:5, c("mean")))),
time.predictors.prior = 1:11,
time.optimize.ssr = 1:11)
args.TFDTW.synth = list(start.time = 1, end.time = 20, treat.time = 12,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 5,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.7))
args.TFDTW.synth.all.units = list(target = "A",
data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
all.units.parallel = FALSE)
filter.width.range = filter.width.range
k.range = k.range
step.pattern.range = step.pattern.range
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units
grid.search.parallel = grid.search.parallel
if (grid.search.parallel) {
fun.map = furrr::future_map
}else{
fun.map = purrr::map
}
# vanilla synthetic control
data = args.TFDTW.synth.all.units[["data"]]
units = data[c("id", "unit")] %>% distinct
units.list = units %>% split(., seq(nrow(units)))
args.synth = args.TFDTW.synth.all.units$args.TFDTW.synth$args.synth
args.synth[["df"]] = data
args.synth[["dep.var"]] = "value_raw"
res.synth.raw.list = units.list %>%
set_names(units$unit) %>%
fun.map(
~{
item = .
dependent.id = item$id
args.synth[["dependent.id"]] = dependent.id
res = do.call(do.synth, args.synth)
}
)
# grid search space
search.grid = expand.grid(filter.width.range, k.range,
names(step.pattern.range)) %>%
`colnames<-`(c("filter.width", "k", "step.pattern"))
search.grid.list = search.grid %>% split(., seq(nrow(search.grid)))
results = NULL
for (i in 1:length(search.grid.list)) {
print(i)
task = search.grid.list[[i]]
args.TFDTW.synth.all.units[["filter.width"]] = task$filter.width
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["k"]] = task$k
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["step.pattern1"]] =
step.pattern.range[[task$step.pattern]]
args.TFDTW.synth.all.units[["res.synth.raw.list"]] = res.synth.raw.list
results[[i]] = do.call(TFDTW.synth.all.units, args.TFDTW.synth.all.units)
}
for (i in 33:length(search.grid.list)) {
print(i)
task = search.grid.list[[i]]
args.TFDTW.synth.all.units[["filter.width"]] = task$filter.width
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["k"]] = task$k
args.TFDTW.synth.all.units$args.TFDTW.synth$args.TFDTW[["step.pattern1"]] =
step.pattern.range[[task$step.pattern]]
args.TFDTW.synth.all.units[["res.synth.raw.list"]] = res.synth.raw.list
results[[i]] = do.call(TFDTW.synth.all.units, args.TFDTW.synth.all.units)
}
mse = lapply(results, "[[", "mse") %>% do.call("rbind", .)
View(mse)
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, lm.predict1, col = "red")
lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[59]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[59]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
lines(1:20, lm.predict1, col = "red")
lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[72]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[72]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
# lines(1:20, lm.predict1, col = "red")
# lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[72]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[72]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
# lines(1:20, lm.predict1, col = "red")
# lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[73]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[73]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
# lines(1:20, lm.predict1, col = "red")
# lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[74]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[74]]$res.synth.target.TFDTW$synthetic, col = "pink")
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
# lines(1:20, lm.predict1, col = "red")
# lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[25]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[25]]$res.synth.target.TFDTW$synthetic, col = "pink")
item = results[[1]]
res = results %>%
future_map(
~{
item = .
value = item$res.synth.target.raw$value
synth.sc = item$res.synth.target.raw$synthetic
synth.dsc = item$res.synth.target.TFDTW$synthetic
gap.sc = value - synth.sc
gap.dsc = value - synth.dsc
n.na = sum(is.na(gap.dsc))
mse = mean((gap.dsc[12:(n.na-1)])^2)
data.frame(n.na = n.na,
mse = mse)
}
)
res = results %>%
future_map(
~{
item = .
value = item$res.synth.target.raw$value
synth.sc = item$res.synth.target.raw$synthetic
synth.dsc = item$res.synth.target.TFDTW$synthetic
gap.sc = value - synth.sc
gap.dsc = value - synth.dsc
n.na = sum(is.na(gap.dsc))
mse = mean((gap.dsc[12:(20-n.na)])^2)
data.frame(n.na = n.na,
mse = mse)
}
)
res = results %>%
future_map(
~{
item = .
value = item$res.synth.target.raw$value
synth.sc = item$res.synth.target.raw$synthetic
synth.dsc = item$res.synth.target.TFDTW$synthetic
gap.sc = value - synth.sc
gap.dsc = value - synth.dsc
n.na = sum(is.na(gap.dsc))
mse = mean((gap.dsc[12:(20-n.na)])^2)
data.frame(n.na = n.na,
mse = mse)
}
) %>% do.call("rbind", .)
View(res)
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
# lines(1:20, lm.predict1, col = "red")
# lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[27]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[27]]$res.synth.target.TFDTW$synthetic, col = "pink")
mse = mse %>% filter(unit ==A)
mse = mse %>% filter(unit =="A")
res$pre = mse$mse.preT.TFDTW
res$pre = NA
res$pre[c(1:31, 33:84)] = mse$mse.preT.TFDTW
res = results %>%
future_map(
~{
item = .
value = item$res.synth.target.raw$value
synth.sc = item$res.synth.target.raw$synthetic
synth.dsc = item$res.synth.target.TFDTW$synthetic
gap.sc = value - synth.sc
gap.dsc = value - synth.dsc
n.na = sum(is.na(gap.dsc))
mse.dsc = mean((gap.dsc[12:(20-n.na)])^2)
mse.sc = mean((gap.sc[12:(20-n.na)])^2)
data.frame(n.na = n.na,
mse.sc = mse.sc,
mse.dsc = mse.dsc)
}
) %>% do.call("rbind", .)
res$pre = NA
res$pre[c(1:31, 33:84)] = mse$mse.preT.TFDTW
plot(ts(df$A))
lines(1:20, df$B, col = "blue")
lines(1:20, df$C, col = "green")
# lines(1:20, lm.predict1, col = "red")
# lines(1:20, lm.predict2, col = "orange")
lines(1:20, results[[18]]$res.synth.target.raw$synthetic, col = "purple")
lines(1:20, results[[18]]$res.synth.target.TFDTW$synthetic, col = "pink")
