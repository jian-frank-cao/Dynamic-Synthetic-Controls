## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
library(tidyverse)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/grid.search.R")
getwd()
setwd("/Users/jiancao/Documents/GitHub/Dynamic-Synthetic-Controls")
getwd()
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
# t.test for log(MSEdsc/MSEsc)
df.mse = readRDS("./data/df.mse_basque.Rds")
## Placebo ---------------------------------------------------------------------
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
file.list
## Basque Terrorism Data -------------------------------------------------------
data(basque, package = "Synth")
data = basque
colnames(data)[1:4] = c("id", "unit", "time", "value")
data = data %>% mutate(invest_ratio = invest/value,
value_raw = value)
# rescale
df.rescale = data %>%
filter(time <= 1970) %>%
group_by(unit) %>%
summarise(value.min = min(value),
value.max = max(value)) %>%
ungroup()
mean.diff = mean(df.rescale$value.max - df.rescale$value.min)
df.rescale = df.rescale %>%
mutate(
multiplier = mean.diff/(value.max - value.min)
)
data = left_join(data, df.rescale, by = "unit")
data = data %>%
mutate(
value.bak = value_raw,
value_raw = (value_raw - value.min)*multiplier,
value = value_raw
)
# data list
data.list = list(list(target = "Basque Country (Pais Vasco)",
data = data))
ids = data$id %>%
unique
for (i in ids) {
data.temp = data %>% filter(!(id %in% c(i, 17)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
select2 = combn(setdiff(ids, 17), 2, simplify = TRUE)[,1:100]
for (i in 1:ncol(select2)) {
data.temp = data %>% filter(!(id %in% c(select2[, i], 17)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
View(data.list)
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
## Placebo ---------------------------------------------------------------------
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
as.list(1:length(file.list))
file.name = file.list[[1]]
file.name
data.id = 1
data.list = readRDS(paste0(folder, file.name))
View(data.list)
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
View(mse)
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
file.name
strsplit(file.name, "_")
strsplit(file.name, "_")[[1]][4]
data.id = strsplit(file.name, "_")[[1]][4]
data.id = strsplit(data.id, ".")[[1]][1]
data.id
data.id = strsplit(file.name, "_")[[1]][4]
data.id
strsplit(data.id, ".")
strsplit(data.id, ".R")
data.id = strsplit(file.name, "_")[[1]][4]
data.id = strsplit(data.id, ".R")[[1]][1]
data.id
data.id = strsplit(file.name, "_")[[1]][4]
data.id = as.numeric(strsplit(data.id, ".R")[[1]][1])
data.id
## Placebo ---------------------------------------------------------------------
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
# df.mse
df.mse = file.list %>%
future_map(
~{
file.name = .
data.id = strsplit(file.name, "_")[[1]][4]
data.id = as.numeric(strsplit(data.id, ".R")[[1]][1])
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
saveRDS(df.mse, "./data/df.mse_basque.x.Rds")
View(df.mse)
## Placebo ---------------------------------------------------------------------
df.mse = readRDS("./data/df.mse_basque.x.Rds")
View(df.mse)
library(checkpoint)
checkpoint("2022-04-01")
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/simulate.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 100
n = 10
beta = 1
shock = 10
# simulate
data.list.ma06 = NULL
for (i in 1:n.simulation) {
data.list.ma06[[i]] = sim.data(n = n, length = length,
t.treat = 60, shock = shock,
arima.order = c(0,1,1),
ar.x = NULL, ma.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = beta)
}
saveRDS(data.list.ma06, paste0("./data/simul_data_beta1_ma06.Rds"))
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 20
n = 10
beta = 1
shock = 10
# simulate
data.list.n20 = NULL
for (i in 1:n.simulation) {
data.list.n20[[i]] = sim.data(n = n, length = length,
t.treat = 12, shock = shock, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
treat.last = 0.15,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = beta)
}
data.list.n20[[3]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[30]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[35]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[120]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[100]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
set.seed(20220407)
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 20
n = 10
beta = 1
shock = 10
# simulate
data.list.n20 = NULL
for (i in 1:n.simulation) {
data.list.n20[[i]] = sim.data(n = n, length = length,
t.treat = 12, shock = shock, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
treat.last = 0.15,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 10,
beta = beta)
}
data.list.n20[[100]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[60]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[15]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
(1:9)*2+3
(0:2)*2+3
(0:2)*2+3
3:6
## Placebo ---------------------------------------------------------------------
df.mse = readRDS("./data/df.mse_basque.x.Rds")
View(df.mse)
(1:9)*2+3
1955:1969
View(data.list)
