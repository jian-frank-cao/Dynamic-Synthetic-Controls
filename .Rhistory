hjust = c(0, 0, 0),
font.label = list(size = 16, color = "grey20",
face = "bold"),
ncol = 1, nrow = 3,
# common.legend = TRUE, legend = "bottom",
align = "hv")
fig.all
ggsave("./figures/figure_TFDTW_8.pdf",
fig.all, width = 8, height = 8,
units = "in", limitsize = FALSE)
## dtwC ------------------------------------------------------------------------
fig.dtwC = df %>%
# filter(group %in% c("Y", "X", "X (Warped)")) %>%
filter(group %in% c("Y", "X") | unit == "") %>%
ggplot(aes(x = time, y = value, color = group)) +
# geom_line(data = df %>% filter(!is.na(dtwC1)),
#           aes(group = dtwC1), color = "grey80",
#           linetype = "longdash", size = 1) +
# geom_line(data = df %>% filter(!is.na(dtwC2)),
#           aes(group = dtwC2), color = "grey80",
#           linetype = "dotted", size = 1) +
geom_segment(aes(x = 500, y = -20, xend = 500, yend = 50),
color = "grey80", size = 0.5, linetype = "solid") +
# geom_line(data = df %>% filter(!is.na(dtwC)),
#           aes(group = dtwC), color = "grey80",
#           linetype = "twodash", size = 1) +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey80", size = 3) +
# geom_segment(aes(x = cutoff, y = df$value[2000+cutoff],
#                  xend = t_treat, yend = df$value[3000+t_treat]),
#              color = "grey80", size = 1.5, linetype = "solid") +
geom_point(aes(x = cutoff, y = df$value[cutoff+2000]),
color = "#fe4a49", size = 3) +
# geom_point(aes(x = t_treat, y = df$value[t_treat+3000]),
#            color = "#2ab7ca", size = 3) +
# annotate("text", x = 475, y = df$value[3000+t_treat]+3, label = "T",
#          size = 5, col = "#2ab7ca", parse=TRUE) +
annotate("text", x = 460, y = df$value[2000+cutoff]-3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
# annotate("text", x = 250, y = 5, label = "P[pre]",
#          size = 6, col = "grey20", parse=TRUE) +
# annotate("text", x = 750, y = 14, label = "P[post]==P[Q%->%R](P[pre])",
#          size = 6, col = "grey20", parse=TRUE) +
scale_color_manual(name = NULL, labels = c("Y", "X", expression(paste(X^w))),
values = c("grey80","#fe4a49", # "#f4b6c2"
"#2ab7ca")) + # "#adcbe3"
# scale_color_manual(name = NULL, values = c("grey80","grey80","#fe4a49",
#                                            "#fe4a49","#2ab7ca","#2ab7ca")) +
coord_cartesian(ylim = c(-10, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("3. Warp ", X[pre], " and ", X[post]))) +
theme_bw() +
theme(legend.position = c(0.92,0.6),
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig.dtwC
## Plot ------------------------------------------------------------------------
fig.all = ggpubr::ggarrange(fig.dtwA,
fig.dtwB,
fig.dtwC,
labels = c("1. Match Ypre and Xpre",
"2. Match Xpre and Xpost",
"3. Warp Xpre and Xpost"),
label.x = 0.1,
label.y = 0.9,
hjust = c(0, 0, 0),
font.label = list(size = 16, color = "grey20",
face = "bold"),
ncol = 1, nrow = 3,
# common.legend = TRUE, legend = "bottom",
align = "hv")
fig.all
ggsave("./figures/figure_TFDTW_9.pdf",
fig.all, width = 8, height = 8,
units = "in", limitsize = FALSE)
## dtwC ------------------------------------------------------------------------
fig.dtwC = df %>%
# filter(group %in% c("Y", "X", "X (Warped)")) %>%
filter(group %in% c("Y", "X") | unit == "X pre-T (Warped)") %>%
ggplot(aes(x = time, y = value, color = group)) +
geom_line(data = df %>% filter(!is.na(dtwC1)),
aes(group = dtwC1), color = "grey80",
linetype = "longdash", size = 1) +
# geom_line(data = df %>% filter(!is.na(dtwC2)),
#           aes(group = dtwC2), color = "grey80",
#           linetype = "dotted", size = 1) +
geom_segment(aes(x = 500, y = -20, xend = 500, yend = 50),
color = "grey80", size = 0.5, linetype = "solid") +
# geom_line(data = df %>% filter(!is.na(dtwC)),
#           aes(group = dtwC), color = "grey80",
#           linetype = "twodash", size = 1) +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey80", size = 3) +
# geom_segment(aes(x = cutoff, y = df$value[2000+cutoff],
#                  xend = t_treat, yend = df$value[3000+t_treat]),
#              color = "grey80", size = 1.5, linetype = "solid") +
geom_point(aes(x = cutoff, y = df$value[cutoff+2000]),
color = "#fe4a49", size = 3) +
geom_point(aes(x = t_treat, y = df$value[t_treat+3000]),
color = "#2ab7ca", size = 3) +
annotate("text", x = 475, y = df$value[3000+t_treat]+3, label = "T",
size = 5, col = "#2ab7ca", parse=TRUE) +
annotate("text", x = 460, y = df$value[2000+cutoff]-3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
annotate("text", x = 250, y = 5, label = "P[pre]",
size = 6, col = "grey20", parse=TRUE) +
# annotate("text", x = 750, y = 14, label = "P[post]==P[Q%->%R](P[pre])",
#          size = 6, col = "grey20", parse=TRUE) +
scale_color_manual(name = NULL, labels = c("Y", "X", expression(paste(X^w))),
values = c("grey80","#fe4a49", # "#f4b6c2"
"#2ab7ca")) + # "#adcbe3"
# scale_color_manual(name = NULL, values = c("grey80","grey80","#fe4a49",
#                                            "#fe4a49","#2ab7ca","#2ab7ca")) +
coord_cartesian(ylim = c(-10, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("3. Warp ", X[pre], " and ", X[post]))) +
theme_bw() +
theme(legend.position = c(0.92,0.6),
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
## Plot ------------------------------------------------------------------------
fig.all = ggpubr::ggarrange(fig.dtwA,
fig.dtwB,
fig.dtwC,
labels = c("1. Match Ypre and Xpre",
"2. Match Xpre and Xpost",
"3. Warp Xpre and Xpost"),
label.x = 0.1,
label.y = 0.9,
hjust = c(0, 0, 0),
font.label = list(size = 16, color = "grey20",
face = "bold"),
ncol = 1, nrow = 3,
# common.legend = TRUE, legend = "bottom",
align = "hv")
fig.all
ggsave("./figures/figure_TFDTW_10.pdf",
fig.all, width = 8, height = 8,
units = "in", limitsize = FALSE)
## dtwC ------------------------------------------------------------------------
fig.dtwC = df %>%
filter(group %in% c("Y", "X", "X (Warped)")) %>%
# filter(group %in% c("Y", "X") | unit == "X pre-T (Warped)") %>%
ggplot(aes(x = time, y = value, color = group)) +
geom_line(data = df %>% filter(!is.na(dtwC1)),
aes(group = dtwC1), color = "grey80",
linetype = "longdash", size = 1) +
geom_line(data = df %>% filter(!is.na(dtwC2)),
aes(group = dtwC2), color = "grey80",
linetype = "dotted", size = 1) +
geom_segment(aes(x = 500, y = -20, xend = 500, yend = 50),
color = "grey80", size = 0.5, linetype = "solid") +
# geom_line(data = df %>% filter(!is.na(dtwC)),
#           aes(group = dtwC), color = "grey80",
#           linetype = "twodash", size = 1) +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey80", size = 3) +
# geom_segment(aes(x = cutoff, y = df$value[2000+cutoff],
#                  xend = t_treat, yend = df$value[3000+t_treat]),
#              color = "grey80", size = 1.5, linetype = "solid") +
geom_point(aes(x = cutoff, y = df$value[cutoff+2000]),
color = "#fe4a49", size = 3) +
geom_point(aes(x = t_treat, y = df$value[t_treat+3000]),
color = "#2ab7ca", size = 3) +
annotate("text", x = 475, y = df$value[3000+t_treat]+3, label = "T",
size = 5, col = "#2ab7ca", parse=TRUE) +
annotate("text", x = 460, y = df$value[2000+cutoff]-3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
annotate("text", x = 250, y = 5, label = "P[pre]",
size = 6, col = "grey20", parse=TRUE) +
annotate("text", x = 750, y = 14, label = "P[post]==P[Q%->%R](P[pre])",
size = 6, col = "grey20", parse=TRUE) +
scale_color_manual(name = NULL, labels = c("Y", "X", expression(paste(X^w))),
values = c("grey80","#fe4a49", # "#f4b6c2"
"#2ab7ca")) + # "#adcbe3"
# scale_color_manual(name = NULL, values = c("grey80","grey80","#fe4a49",
#                                            "#fe4a49","#2ab7ca","#2ab7ca")) +
coord_cartesian(ylim = c(-10, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("3. Warp ", X[pre], " and ", X[post]))) +
theme_bw() +
theme(legend.position = c(0.92,0.6),
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
## Plot ------------------------------------------------------------------------
fig.all = ggpubr::ggarrange(fig.dtwA,
fig.dtwB,
fig.dtwC,
labels = c("1. Match Ypre and Xpre",
"2. Match Xpre and Xpost",
"3. Warp Xpre and Xpost"),
label.x = 0.1,
label.y = 0.9,
hjust = c(0, 0, 0),
font.label = list(size = 16, color = "grey20",
face = "bold"),
ncol = 1, nrow = 3,
# common.legend = TRUE, legend = "bottom",
align = "hv")
fig.all
ggsave("./figures/figure_TFDTW_11.pdf",
fig.all, width = 8, height = 8,
units = "in", limitsize = FALSE)
## dtwB ------------------------------------------------------------------------
fig.dtwB = df %>%
filter(group %in% c("Y", "X0")) %>%
ggplot(aes(x = time, y = value, color = group)) +
# geom_segment(aes(x = cutoff, y = 0, xend = cutoff, yend = 25),
#              color = "#2ab7ca", size = 1, linetype = "dashed") +
geom_segment(aes(x = 500, y = -10, xend = 500, yend = 50),
color = "grey80", size = 0.5, linetype = "solid") +
geom_rect(aes(xmin = 560, xmax = 690, ymin = 7, ymax = 19),
color = NA, fill = "grey80") +
# geom_rect(aes(xmin = 305, xmax = 435, ymin = 3, ymax = 14),
#           color = NA, fill = "grey80") +
# geom_rect(aes(xmin = 810, xmax = 920, ymin = 13, ymax = 22),
#           color = NA, fill = "grey90") +
# geom_rect(aes(xmin = 80, xmax = 190, ymin = -1, ymax = 8),
#           color = NA, fill = "grey90") +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey80", size = 3) +
geom_point(aes(x = cutoff, y = df$value[cutoff+1000]),
color = "#fe4a49", size = 3) +
geom_rect(aes(xmin = 560, xmax = 690, ymin = 7, ymax = 19),
color = "grey30", fill = NA) +
# geom_rect(aes(xmin = 305, xmax = 435, ymin = 3, ymax = 14),
#           color = "grey30", fill = NA) +
# geom_curve(aes(x = 560, y = 19,
#                xend = 435, yend = 14),
#            curvature = 0.2,
#            linetype = "solid",
#            color = "grey30",
#            arrow = arrow(length = unit(0.03, "npc"))) +
# geom_rect(aes(xmin = 810, xmax = 920, ymin = 13, ymax = 22),
#           color = "grey30", fill = NA, linetype = "dashed") +
# geom_rect(aes(xmin = 80, xmax = 190, ymin = -1, ymax = 8),
#           color = "grey30", fill = NA, linetype = "dashed") +
# geom_curve(aes(x = 810, y = 13,
#                xend = 190, yend = -1),
#            curvature = -0.2,
#            linetype = "dashed",
#            color = "grey30",
#            arrow = arrow(length = unit(0.03, "npc"))) +
# annotate("text", x = 475, y = df$value[3000+t_treat]+3, label = "T",
#          size = 7, col = "#2ab7ca", parse=TRUE) +
annotate("text", x = 490, y = df$value[1000+cutoff]+3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
# annotate("text", x = 500, y = 3, label = "P[Q%->%R]",
#          size = 6, col = "grey20", parse = TRUE) +
scale_color_manual(name = NULL, values = c("grey80", "#fe4a49")) +
coord_cartesian(ylim = c(-3, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("2. Match ", X[pre], " and ", X[post]))) +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig.dtwB
## Plot ------------------------------------------------------------------------
fig.all = ggpubr::ggarrange(fig.dtwA,
fig.dtwB,
fig.dtwC,
labels = c("1. Match Ypre and Xpre",
"2. Match Xpre and Xpost",
"3. Warp Xpre and Xpost"),
label.x = 0.1,
label.y = 0.9,
hjust = c(0, 0, 0),
font.label = list(size = 16, color = "grey20",
face = "bold"),
ncol = 1, nrow = 3,
# common.legend = TRUE, legend = "bottom",
align = "hv")
fig.all
ggsave("./figures/figure_TFDTW_4.pdf",
fig.all, width = 8, height = 8,
units = "in", limitsize = FALSE)
## dtwB ------------------------------------------------------------------------
fig.dtwB = df %>%
filter(group %in% c("Y", "X0")) %>%
ggplot(aes(x = time, y = value, color = group)) +
# geom_segment(aes(x = cutoff, y = 0, xend = cutoff, yend = 25),
#              color = "#2ab7ca", size = 1, linetype = "dashed") +
geom_segment(aes(x = 500, y = -10, xend = 500, yend = 50),
color = "grey80", size = 0.5, linetype = "solid") +
# geom_rect(aes(xmin = 560, xmax = 690, ymin = 7, ymax = 19),
#           color = NA, fill = "grey80") +
# geom_rect(aes(xmin = 305, xmax = 435, ymin = 3, ymax = 14),
#           color = NA, fill = "grey80") +
# geom_rect(aes(xmin = 810, xmax = 920, ymin = 13, ymax = 22),
#           color = NA, fill = "grey90") +
# geom_rect(aes(xmin = 80, xmax = 190, ymin = -1, ymax = 8),
#           color = NA, fill = "grey90") +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey80", size = 3) +
geom_point(aes(x = cutoff, y = df$value[cutoff+1000]),
color = "#fe4a49", size = 3) +
# geom_rect(aes(xmin = 560, xmax = 690, ymin = 7, ymax = 19),
#           color = "grey30", fill = NA) +
# geom_rect(aes(xmin = 305, xmax = 435, ymin = 3, ymax = 14),
#           color = "grey30", fill = NA) +
# geom_curve(aes(x = 560, y = 19,
#                xend = 435, yend = 14),
#            curvature = 0.2,
#            linetype = "solid",
#            color = "grey30",
#            arrow = arrow(length = unit(0.03, "npc"))) +
# geom_rect(aes(xmin = 810, xmax = 920, ymin = 13, ymax = 22),
#           color = "grey30", fill = NA, linetype = "dashed") +
# geom_rect(aes(xmin = 80, xmax = 190, ymin = -1, ymax = 8),
#           color = "grey30", fill = NA, linetype = "dashed") +
# geom_curve(aes(x = 810, y = 13,
#                xend = 190, yend = -1),
#            curvature = -0.2,
#            linetype = "dashed",
#            color = "grey30",
#            arrow = arrow(length = unit(0.03, "npc"))) +
# annotate("text", x = 475, y = df$value[3000+t_treat]+3, label = "T",
#          size = 7, col = "#2ab7ca", parse=TRUE) +
annotate("text", x = 490, y = df$value[1000+cutoff]+3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
# annotate("text", x = 500, y = 3, label = "P[Q%->%R]",
#          size = 6, col = "grey20", parse = TRUE) +
scale_color_manual(name = NULL, values = c("grey80", "#fe4a49")) +
coord_cartesian(ylim = c(-3, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("2. Match ", X[pre], " and ", X[post]))) +
theme_bw() +
theme(legend.position = "none",
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
## dtwC ------------------------------------------------------------------------
fig.dtwC = df %>%
filter(group %in% c("Y", "X", "X (Warped)")) %>%
# filter(group %in% c("Y", "X") | unit == "X pre-T (Warped)") %>%
ggplot(aes(x = time, y = value, color = group)) +
geom_line(data = df %>% filter(!is.na(dtwC1)),
aes(group = dtwC1), color = "grey80",
linetype = "longdash", size = 1) +
geom_line(data = df %>% filter(!is.na(dtwC2)),
aes(group = dtwC2), color = "grey80",
linetype = "dotted", size = 1) +
geom_segment(aes(x = 500, y = -20, xend = 500, yend = 50),
color = "grey80", size = 0.5, linetype = "solid") +
# geom_line(data = df %>% filter(!is.na(dtwC)),
#           aes(group = dtwC), color = "grey80",
#           linetype = "twodash", size = 1) +
geom_line(size = 1) +
geom_point(aes(x = t_treat, y = df$value[t_treat]),
color = "grey80", size = 3) +
# geom_segment(aes(x = cutoff, y = df$value[2000+cutoff],
#                  xend = t_treat, yend = df$value[3000+t_treat]),
#              color = "grey80", size = 1.5, linetype = "solid") +
geom_point(aes(x = cutoff, y = df$value[cutoff+2000]),
color = "#fe4a49", size = 3) +
geom_point(aes(x = t_treat, y = df$value[t_treat+3000]),
color = "#2ab7ca", size = 3) +
annotate("text", x = 475, y = df$value[3000+t_treat]+3, label = "T",
size = 5, col = "#2ab7ca", parse=TRUE) +
annotate("text", x = 460, y = df$value[2000+cutoff]-3, label = "C",
size = 5, col = "#fe4a49", parse=TRUE) +
annotate("text", x = 250, y = 5, label = "P[pre]",
size = 6, col = "grey20", parse=TRUE) +
annotate("text", x = 750, y = 14, label = "P[post]==P[Q%->%R](P[pre])",
size = 6, col = "grey20", parse=TRUE) +
scale_color_manual(name = NULL, labels = c("Y", "X", expression(paste(X^w))),
values = c("grey80","#fe4a49", # "#f4b6c2"
"#2ab7ca")) + # "#adcbe3"
# scale_color_manual(name = NULL, values = c("grey80","grey80","#fe4a49",
#                                            "#fe4a49","#2ab7ca","#2ab7ca")) +
coord_cartesian(ylim = c(-10, 45), xlim = c(-150, 1150)) +
# ggtitle(expression(paste("3. Warp ", X[pre], " and ", X[post]))) +
theme_bw() +
theme(legend.position = c(0.92,0.6),
legend.box = "horizontal",
legend.background = element_rect(fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.title = element_text(hjust = 0.1, vjust = -20),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
## Plot ------------------------------------------------------------------------
fig.all = ggpubr::ggarrange(fig.dtwA,
fig.dtwB,
fig.dtwC,
labels = c("1. Match Ypre and Xpre",
"2. Match Xpre and Xpost",
"3. Warp Xpre and Xpost"),
label.x = 0.1,
label.y = 0.9,
hjust = c(0, 0, 0),
font.label = list(size = 16, color = "grey20",
face = "bold"),
ncol = 1, nrow = 3,
# common.legend = TRUE, legend = "bottom",
align = "hv")
fig.all
ggsave("./figures/figure_TFDTW_0.pdf",
fig.all, width = 8, height = 8,
units = "in", limitsize = FALSE)
## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
dtw::symmetricP2
plot(dtw::symmetricP2)
library(dtw)
pattern <- stepPattern("symmetricP2")
symmetricP2
print(symmetric2)
plot(symmetricP2,main="Sakoe's Symmetric P=2 recursion")
a = sin(seq(1, pi*2, 10))
a
seq(1, pi*2, 10)
# Create the sequences for x and y
x <- seq(0, 2*pi, length.out = 30)
y <- seq(0, 2*pi, length.out = 100)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
# Plot the two sine curves
plot(x, sin_x, type = "l", col = "red", ylim = c(-1, 1), xlab = "x and y", ylab = "sin value", main = "Sine Curves")
lines(y, sin_y, col = "blue")
legend("topright", legend = c("sin(x)", "sin(y)"), col = c("red", "blue"), lty = 1)
sin_x
sin_y
y
res = dtw(sin_x, sin_y, step.pattern = symmetricP2)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE)
dtwPlotThreeWay(res)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
# Create the sequences for x and y
x <- seq(0, 2*pi, length.out = 30)
y <- seq(0, 2*pi, length.out = 200)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
res = dtw(sin_y, sin_x, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
y <- seq(0, 2*pi, length.out = 60)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
y <- seq(0, 2*pi, length.out = 40)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
y <- seq(0, 2*pi, length.out = 35)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
y <- seq(0, 2*pi, length.out = 45)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
y <- seq(0, 2*pi, length.out = 50)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = symmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
res = dtw(sin_x, sin_y, step.pattern = asymmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
y <- seq(0, 2*pi, length.out = 70)
# Compute the sine values
sin_x <- sin(x)
sin_y <- sin(y)
res = dtw(sin_x, sin_y, step.pattern = asymmetricP2, open.end = TRUE, keep = TRUE)
dtwPlotThreeWay(res)
