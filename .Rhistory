results = NULL
beta = 1
folder = "./data/res_sim/1011/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 10
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
ind = ind.max.neg.ratio[ind.min.p.value[1]]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
df = df %>%
mutate(log.ratio = log(abs(diff_new)/abs(diff_original)),
id = factor(id))
res.aov = aov(log.ratio ~ id, df)
summary.aov = summary(res.aov)
BMS = summary.aov[[1]]$`Mean Sq`[1]
WMS = summary.aov[[1]]$`Mean Sq`[2]
k = 10
res.icc = (BMS - WMS)/(BMS + (k - 1)*WMS)
res.vif = 1 + (k - 1)*res.icc
DF = nrow(df)/res.vif
t.value = t.test(df$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value
DF
results = NULL
beta = 1
folder = "./data/res_sim/1024/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 0
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
ind = ind.max.neg.ratio[ind.min.p.value[1]]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
## Plot result -----------------------------------------------------------------
results = NULL
beta = 1
folder = "./data/res_sim/1024/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
res.files
results = NULL
beta = 1
folder = "./data/res_sim/1124/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
length = 100
shock = 0
treat_time = 60
n_mse = 10
causal_effect = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
# placebo test figure
res = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
id = .y
# neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
# # neg.ratio.rank = rank(neg.ratio, ties.method = "max")
# ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
# p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
# # p.value.rank = rank(1 - p.value, ties.method = "max")
# ind.min.p.value = which(p.value == min(p.value, na.rm = T))[1]
# # mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
# #   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# # mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# # score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# # ind = which(score == max(score, na.rm = T))[1]
# ind = ind.max.neg.ratio[1]
neg.ratio = lapply(item, "[[", "neg.ratio") %>% do.call("c", .)
ind.max.neg.ratio = which(neg.ratio == max(neg.ratio, na.rm = T))
p.value = lapply(item, "[[", "p.value") %>% do.call("c", .) %>% .[ind.max.neg.ratio]
ind.min.p.value = which(p.value == min(p.value, na.rm = T))
# mse.pre = lapply(item, "[[", "mse") %>% do.call("rbind", .) %>%
#   filter(unit == "A") %>% .[["mse.preT.TFDTW"]] %>% .[ind.max.neg.ratio]
# mse.pre.rank = rank(1 - mse.pre, ties.method = "max")
# score = neg.ratio.rank*3 + p.value.rank*2 + mse.pre.rank
# ind = which(score == max(score, na.rm = T))[1]
ind = ind.max.neg.ratio[ind.min.p.value[1]]
synth_original = item[[ind]][["res.synth.target.raw"]][["synthetic"]]
synth_new = item[[ind]][["res.synth.target.TFDTW"]][["synthetic"]]
value_raw = item[[ind]][["res.synth.target.raw"]][["value"]]
gap_original = value_raw - synth_original
gap_new = value_raw - synth_new
diff_original = value_raw - synth_original - causal_effect
diff_new = value_raw - synth_new - causal_effect
mse_original = mean(diff_original[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse_new = mean(diff_new[(treat_time + 1):(treat_time + n_mse)]^2, rm.na = T)
mse = data.frame(mse_original = mse_original,
mse_new = mse_new,
log_ratio = log(mse_new/mse_original))
list(df = data.frame(time = 0:(length(value_raw)-1),
id = id,
value_raw = value_raw,
synth_original = synth_original,
synth_new = synth_new,
gap_origin = gap_original,
gap_new = gap_new,
diff_original = diff_original,
diff_new = diff_new),
mse = mse)
}
)
df = lapply(res, "[[", "df") %>% do.call("rbind", .)
df = df %>% filter(time %in% 61:70)
# log(mse/mse) t test ==========================================
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
df = df %>%
mutate(log.ratio = log(abs(diff_new)/abs(diff_original)),
id = factor(id))
res.aov = aov(log.ratio ~ id, df)
summary.aov = summary(res.aov)
BMS = summary.aov[[1]]$`Mean Sq`[1]
WMS = summary.aov[[1]]$`Mean Sq`[2]
k = 10
res.icc = (BMS - WMS)/(BMS + (k - 1)*WMS)
res.vif = 1 + (k - 1)*res.icc
DF = nrow(df)/res.vif
t.value = t.test(df$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value
DF
t.test(df$log.ratio)
# log(mse/mse) t test ==========================================
mse = lapply(res, "[[", "mse") %>% do.call("rbind", .)
t.test(mse$log_ratio)
results = NULL
folder = "./data/placebo/basque/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1955:1997,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
View(df)
t.interval = 1971:1980
df = df %>% filter(time %in% t.interval)
n.t = length(t.interval)
n.datasets = nrow(df)/length(t.interval)
View(df)
# log(diff/diff) t test ==========================================
df = df %>%
mutate(log.ratio = log(abs(gap_new)/abs(gap_original)),
id = factor(str_split(unit, "-", simplify = TRUE)[,1]),
target = factor(str_split(unit, "-", simplify = TRUE)[,2]))
res.aov = aov(log.ratio ~ id*target, df)
summary.aov = summary(res.aov)
summary.aov
18*17*9
2601/(18*17)
2601/(16*17)
which(is.na(df$log.ratio))
2890/18/17
18*17
table(df$unit)
table(df$unit) %>% table
summary.aov
28917+16+255+2601
17+16+255+2601
255*10+160+170
170*17+180*16
170*17+180*16
170*17
180*16
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
IMS = summary.aov[[1]]$`Mean Sq`[3]
EMS = summary.aov[[1]]$`Mean Sq`[4]
k = 17
n = 18
l = 10
target = (BMS-IMS)/(l*k) + (JMS-IMS)/(l*n) + (IMS-EMS)/(l)
res.icc = target/(target + EMS)
res.icc
res.vif = 1 + (l - 1)*res.icc
res.vif
DF = nrow(df)/res.vif
DF
t.test(df$log.ratio)$statistic
t.value = t.test(df$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value
t.test(df$log.ratio)
DF
results = NULL
folder = "./data/placebo/tobacco/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1970:2000,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
df = df %>% filter(time %in% 1990:1997)
# log(diff/diff) t test ==========================================
df = df %>%
mutate(log.ratio = log(abs(gap_new)/abs(gap_original)),
id = factor(str_split(unit, "-", simplify = TRUE)[,1]),
target = factor(str_split(unit, "-", simplify = TRUE)[,2]))
res.aov = aov(log.ratio ~ id*target, df)
summary.aov = summary(res.aov)
summary.aov
39*38*9
38*38*9
38*37
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
IMS = summary.aov[[1]]$`Mean Sq`[3]
EMS = summary.aov[[1]]$`Mean Sq`[4]
n = 39
k = 38
l = 10
target = (BMS-IMS)/(l*k) + (JMS-IMS)/(l*n) + (IMS-EMS)/(l)
res.icc = target/(target + EMS)
res.vif = 1 + (l - 1)*res.icc
DF = nrow(df)/res.vif
res.icc
res.vif
DF
t.value = t.test(df$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = TRUE)*2
t.value
p.value = pt(t.value, df = DF, lower.tail = FALSE)*2
p.value
t.test(df$log.ratio)
DF
results = NULL
folder = "./data/placebo/germany/"
res.files = list.files(folder)
for (res.file in res.files) {
results = c(results, list(readRDS(paste0(folder, res.file))))
}
df = future_map2(
results,
as.list(1:length(results)),
~{
item = .x
index = .y
mse = future_map2(
item,
names(item),
~{
item = .x
id = .y
item$mse %>% mutate(id = id)
}
) %>%
do.call("rbind", .)
units = unique(mse$unit)
df.gap.list = NULL
for (i in 1:length(units)) {
target = units[[i]]
scores = mse %>%
filter(unit != target) %>%
group_by(id) %>%
summarise(percent = mean(log.ratio < 0),
p.value = t.test(log.ratio)$p.value)
max.percent = which(scores$percent == max(scores$percent))
min.p = which(scores$p.value[max.percent] == min(scores$p.value[max.percent])[1])[1]
opt.ind = as.numeric(scores$id[max.percent[min.p]])
df.gap.list[[i]] = data.frame(
unit = paste0("d", index, "-", target),
time = 1960:2003,
value = item[[opt.ind]]$results.TFDTW.synth[[target]]$res.synth.raw$value,
gap_original = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.raw,
gap_new = item[[opt.ind]]$results.TFDTW.synth[[target]]$gap.TFDTW
)
# df.gap.list[[i]] = item[[opt.ind]]$mse %>% filter(unit == target) #%>%
#mutate(unit = paste0("d", index, "-", target))
}
df.gap.list %>% do.call("rbind", .)
}
) %>%
do.call("rbind", .)
df = df %>% filter(time %in% 1991:2000)
# log(diff/diff) t test ==========================================
df = df %>%
mutate(log.ratio = log(abs(gap_new)/abs(gap_original)),
id = factor(str_split(unit, "-", simplify = TRUE)[,1]),
target = factor(str_split(unit, "-", simplify = TRUE)[,2]))
res.aov = aov(log.ratio ~ id*target, df)
summary.aov = summary(res.aov)
summary.aov
BMS = summary.aov[[1]]$`Mean Sq`[1]
JMS = summary.aov[[1]]$`Mean Sq`[2]
IMS = summary.aov[[1]]$`Mean Sq`[3]
EMS = summary.aov[[1]]$`Mean Sq`[4]
n = 17
k = 16
l = 10
target = (BMS-IMS)/(l*k) + (JMS-IMS)/(l*n) + (IMS-EMS)/(l)
res.icc = target/(target + EMS)
res.vif = 1 + (l - 1)*res.icc
DF = nrow(df)/res.vif
res.icc
res.vif
DF
t.value = t.test(df$log.ratio)$statistic
p.value = pt(t.value, df = DF, lower.tail = FALSE)*2
t.value
p.value
t.test(df$log.ratio)
DF
