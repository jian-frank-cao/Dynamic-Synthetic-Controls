geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = mean.sc, color = "Mean (SC)"),
data = df.quantile, alpha=1) +
geom_line(aes(x = time, y = mean.dsc, col = "Mean (DSC)"),
data = df.quantile, alpha=1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 60, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 58, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30), xlim = c(0, 80)) +
xlab("Time") +
ylab("Error (y - Synthetic Control - Treatment)") +
theme_bw() +
theme(legend.position=c(0.4,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
df.t.test = data.frame(Beta = c(0, 0.5, 1),
t = c(-4.7862, -5.8137, -8.2442),
P = c(0.0001, 0.0001, 0.0001))
fig.small = df.t.test %>%
ggplot(aes(x = Beta, y = t)) +
annotate("rect", xmin = -0.2, xmax = 1.2,
ymin = -15, ymax = -1.99, alpha = .3) +
geom_line(size = 1) +
geom_point(size = 2, col = color.dsc) +
geom_hline(yintercept = 0, linetype="solid", col = "black") +
geom_hline(yintercept = -1.99, linetype="dashed", col = "grey20") +
annotate("text", x = 0.75, y = -3.0,
label = "P < 0.05", col = "grey20") +
scale_x_continuous(breaks = c(0, 0.5, 1),
labels = c("0", "0.5", "1")) +
scale_y_continuous(breaks = c(-10, -5, 0)) +
coord_cartesian(ylim = c(-10, 0), xlim = c(0, 1)) +
xlab(expression(beta)) +
ylab("t") +
theme_bw() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
fig.sim = fig.big + annotation_custom(ggplotGrob(fig.small),
xmin = 5, xmax = 45,
ymin = 7, ymax = 30)
fig.sim
df.gap = readRDS("./data/df.gap_sim_beta_1.Rds")
# df.gap = df.gap %>% filter(time <= 80)
df.quantile = df.gap %>%
group_by(time) %>%
summarise(mean.sc = mean(gap.sc, na.rm = T),
mean.dsc = mean(gap.dsc, na.rm = T),
quantile.sc.975 = quantile(gap.sc, 0.975, na.rm = T),
quantile.sc.025 = quantile(gap.sc, 0.025, na.rm = T),
quantile.dsc.975 = quantile(gap.dsc, 0.975, na.rm = T),
quantile.dsc.025 = quantile(gap.dsc, 0.025, na.rm = T)) %>%
mutate(group = "quantile")
color.sc = "#2ab7ca"
color.dsc = "#fe4a49"
# color.sc = "grey70"
# color.dsc = "grey30"
colors = c("Mean (SC)" = color.sc,
"Mean (DSC)" = color.dsc)
fills = c("95% Quantile (SC)" = color.sc,
"95% Quantile (DSC)" = color.dsc)
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 60, xmax = 70,
ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = mean.sc, color = "Mean (SC)"),
data = df.quantile, alpha=1) +
geom_line(aes(x = time, y = mean.dsc, col = "Mean (DSC)"),
data = df.quantile, alpha=1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 60, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 58, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Error (y - Synthetic Control - Treatment)") +
theme_bw() +
theme(legend.position=c(0.4,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
df.t.test = data.frame(Beta = c(0, 0.5, 1),
t = c(-4.7862, -5.8137, -8.2442),
P = c(0.0001, 0.0001, 0.0001))
fig.small = df.t.test %>%
ggplot(aes(x = Beta, y = t)) +
annotate("rect", xmin = -0.2, xmax = 1.2,
ymin = -15, ymax = -1.99, alpha = .3) +
geom_line(size = 1) +
geom_point(size = 2, col = color.dsc) +
geom_hline(yintercept = 0, linetype="solid", col = "black") +
geom_hline(yintercept = -1.99, linetype="dashed", col = "grey20") +
annotate("text", x = 0.75, y = -3.0,
label = "P < 0.05", col = "grey20") +
scale_x_continuous(breaks = c(0, 0.5, 1),
labels = c("0", "0.5", "1")) +
scale_y_continuous(breaks = c(-10, -5, 0)) +
coord_cartesian(ylim = c(-10, 0), xlim = c(0, 1)) +
xlab(expression(beta)) +
ylab("t") +
theme_bw() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
fig.sim = fig.big + annotation_custom(ggplotGrob(fig.small),
xmin = 5, xmax = 45,
ymin = 7, ymax = 30)
fig.sim
ggsave("./figures/placebo_sim_0112.pdf",
fig.sim, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 60, xmax = 70,
ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = mean.sc, color = "Mean (SC)"),
data = df.quantile, alpha=1) +
geom_line(aes(x = time, y = mean.dsc, col = "Mean (DSC)"),
data = df.quantile, alpha=1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 60, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 58, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Error (y - Synthetic Control - Treatment)") +
theme_bw() +
theme(legend.position=c(0.2,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
df.t.test = data.frame(Beta = c(0, 0.5, 1),
t = c(-4.7862, -5.8137, -8.2442),
P = c(0.0001, 0.0001, 0.0001))
fig.small = df.t.test %>%
ggplot(aes(x = Beta, y = t)) +
annotate("rect", xmin = -0.2, xmax = 1.2,
ymin = -15, ymax = -1.99, alpha = .3) +
geom_line(size = 1) +
geom_point(size = 2, col = color.dsc) +
geom_hline(yintercept = 0, linetype="solid", col = "black") +
geom_hline(yintercept = -1.99, linetype="dashed", col = "grey20") +
annotate("text", x = 0.75, y = -3.0,
label = "P < 0.05", col = "grey20") +
scale_x_continuous(breaks = c(0, 0.5, 1),
labels = c("0", "0.5", "1")) +
scale_y_continuous(breaks = c(-10, -5, 0)) +
coord_cartesian(ylim = c(-10, 0), xlim = c(0, 1)) +
xlab(expression(beta)) +
ylab("t") +
theme_bw() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
fig.sim = fig.big + annotation_custom(ggplotGrob(fig.small),
xmin = 5, xmax = 45,
ymin = 7, ymax = 30)
ggsave("./figures/placebo_sim_0112.pdf",
fig.sim, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 60, xmax = 70,
ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = mean.sc, color = "Mean (SC)"),
data = df.quantile, alpha=1) +
geom_line(aes(x = time, y = mean.dsc, col = "Mean (DSC)"),
data = df.quantile, alpha=1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 60, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 58, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Error (y - Synthetic Control - Treatment)") +
theme_bw() +
theme(legend.position=c(0.3,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
df.t.test = data.frame(Beta = c(0, 0.5, 1),
t = c(-4.7862, -5.8137, -8.2442),
P = c(0.0001, 0.0001, 0.0001))
fig.small = df.t.test %>%
ggplot(aes(x = Beta, y = t)) +
annotate("rect", xmin = -0.2, xmax = 1.2,
ymin = -15, ymax = -1.99, alpha = .3) +
geom_line(size = 1) +
geom_point(size = 2, col = color.dsc) +
geom_hline(yintercept = 0, linetype="solid", col = "black") +
geom_hline(yintercept = -1.99, linetype="dashed", col = "grey20") +
annotate("text", x = 0.75, y = -3.0,
label = "P < 0.05", col = "grey20") +
scale_x_continuous(breaks = c(0, 0.5, 1),
labels = c("0", "0.5", "1")) +
scale_y_continuous(breaks = c(-10, -5, 0)) +
coord_cartesian(ylim = c(-10, 0), xlim = c(0, 1)) +
xlab(expression(beta)) +
ylab("t") +
theme_bw() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
fig.sim = fig.big + annotation_custom(ggplotGrob(fig.small),
xmin = 5, xmax = 45,
ymin = 7, ymax = 30)
ggsave("./figures/placebo_sim_0112.pdf",
fig.sim, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
file.list = list("res_basque_1204_1")
folder = folder = "./data/"
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
# df.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
library(checkpoint)
checkpoint("2022-04-01")
library(tidyverse)
library(furrr)
plan(multisession, workers = 8)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/misc.R")
source("./R/TFDTW.R")
source("./R/synth.R")
source("./R/implement.R")
source("./R/grid.search.R")
set.seed(20220407)
# df.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
file.list
file.list = list("res_basque_1204_1.Rds")
# df.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
View(df.mse)
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
df.mse = df.mse[-2,]
View(df.mse)
res.aov = aov(log.ratio ~ data.id*unit, df.mse)
t.test(df.mse$log.ratio)
file.list = list("res_tobacco_1204_1.Rds")
pre.start = 11
pre.end = 20
post.start = 21
post.end = 28
# df.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
View(df.mse)
df.mse = df.mse[-4,]
t.test(df.mse$log.ratio)
file.list = list("res_germany_1204_1.Rds")
pre.start = 22
pre.end = 31
post.start = 32
post.end = 41
# de.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
View(df.mse)
df.mse = df.mse[-4.]
# de.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result.synth = .x[["results.TFDTW.synth"]]
grid.id = .y
mse = result.synth %>%
map(
~{
task = .
unit = task$dependent
gap.raw = task$gap.raw
gap.TFDTW = task$gap.TFDTW
data.frame(unit = unit,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse %>% mutate(grid.id = grid.id)
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
group_by(unit) %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
df.mse = df.mse %>%
mutate(log.ratio = log(mse.postT.TFDTW/mse.postT.raw),
data.id = as.character(data.id))
df.mse = df.mse[-4,]
t.test(df.mse$log.ratio)
