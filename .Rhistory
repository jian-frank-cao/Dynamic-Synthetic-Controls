xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey50", size = 0.8) +
annotate("text", x = 680, y = 18, size = 2,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey50", size = 0.8) +
annotate("text", x = 680, y = 18, size = 3,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey50", size = 0.8) +
annotate("text", x = 680, y = 18, size = 4,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey50", size = 0.8) +
annotate("text", x = 680, y = 18, size = 3,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey50", size = 0.8) +
annotate("label", x = 680, y = 18, size = 3,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey20", size = 0.8) +
annotate("label", x = 680, y = 18, size = 3,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
fig = df %>%
ggplot(aes(x = time, y = value, color = unit, linetype = unit)) +
geom_line(size = 0.7) +
scale_linetype_manual(name = NULL,
values = c("Unit T" = "solid", "Unit C1" = "dashed",
"Unit C2" = "dotted", "SC" = "solid",
"DSC" = "solid")) +
scale_color_manual(name = NULL,
values = c("Unit T" = "#4a4e4d", "Unit C1" = "#aaaaaa",
"Unit C2" = "#aaaaaa", "SC" = "#3da4ab",
"DSC" = "#fe8a71")) +
geom_vline(xintercept = 600, linetype="dashed", col = "grey20") +
annotate("segment", x = 730, y = df$value[3730]+0.1,
xend = 730, yend = df$value[630],
arrow = arrow(ends = "both", length = unit(.2,"cm")),
colour = "grey20", size = 0.8) +
annotate("label", x = 680, y = 18, size = 3,
label = "SC estimated\nTreatment Effect", col = "grey20") +
annotate("text", x = 590, y = 18.5,
label = "Treatment", col = "grey20",
angle = 90) +
xlim(350, 750) +
xlab("Time") +
ylab("Y") +
theme_minimal() +
theme(legend.position=c(0.23,0.2),
legend.box = "horizontal",
legend.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
ggsave("./figures/speed_problem.pdf",
fig, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
library(checkpoint)
checkpoint("2022-04-01")
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/simulate.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
folder = paste0("./data/res_sim/beta", beta, "/")
folder = "./data/res_sim/1011/"
file.list = as.list(list.files(folder))
length = 100
treat_time = 60
n_mse = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
n.simulation = 100
length = 100
n = 10
beta = 0
shock = 10
# simulate
data.list = NULL
for (i in 1:n.simulation) {
data.list[[i]] = sim.data(n = n, length = length,
t.treat = 60, shock = shock, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 20,
beta = beta)
}
file.list = as.list(list.files(folder))
length = 100
treat_time = 60
n_mse = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
pre.start = 51
pre.end = 60
post.start = 61
post.end = 70
# de.mse
df.mse = future_map2(
file.list,
as.list(1:length(file.list)),
~{
file.name = .x
data.id = .y
data.list = readRDS(paste0(folder, file.name))
mse = future_map2(
data.list,
as.list(names(data.list)),
~{
result = .x
grid.id = .y
value = result$res.synth.target.raw$value
synth.raw = result$res.synth.target.raw$synthetic
synth.TFDTW = result$res.synth.target.TFDTW$synthetic
gap.raw = value - synth.raw - treatment
gap.TFDTW = value - synth.TFDTW - treatment
data.frame(grid.id = grid.id,
mse.preT.raw = mean(gap.raw[pre.start:pre.end]^2, na.rm = T),
mse.preT.TFDTW = mean(gap.TFDTW[pre.start:pre.end]^2, na.rm = T),
mse.postT.raw = mean(gap.raw[post.start:post.end]^2, na.rm = T),
mse.postT.TFDTW = mean(gap.TFDTW[post.start:post.end]^2, na.rm = T))
}
) %>% do.call("rbind", .)
mse$data.id = data.id
mse %>%
top_n(-1, mse.preT.TFDTW) %>%
top_n(-1, grid.id)
}
) %>% do.call("rbind", .)
file.list = as.list(list.files(folder))
results = file.list %>%
future_map(
~{
file.name = .
readRDS(paste0(folder, file.name))
}
)
df.gap = NULL
for (i in 1:nrow(df.mse)) {
data.id = df.mse$data.id[i]
grid.id = df.mse$grid.id[i]
df.gap[[i]] = data.frame(
time = 1:100,
data.id = data.id,
grid.id = grid.id,
value = results[[data.id]][[grid.id]][["res.synth.target.raw"]][[1]],
synth.sc = results[[data.id]][[grid.id]][["res.synth.target.raw"]][[3]],
synth.dsc = results[[data.id]][[grid.id]][["res.synth.target.TFDTW"]][[3]]
)
print(i)
}
df.gap = df.gap %>%
do.call("rbind", .) %>%
mutate(
gap.sc = value - synth.sc,
gap.dsc = value - synth.dsc,
group = paste0(data.id, "-", grid.id)
)
shock = 10
length = 100
treat_time = 60
n_mse = 10
treatment = c(rep(0, treat_time),
seq(0, shock, length.out = round(0.1*length)),
rep(shock, round(0.9*length - treat_time)))
df.quantile = df.gap %>%
group_by(time) %>%
summarise(mean.sc = mean(gap.sc, na.rm = T),
mean.dsc = mean(gap.dsc, na.rm = T),
quantile.sc.975 = quantile(gap.sc, 0.975, na.rm = T),
quantile.sc.025 = quantile(gap.sc, 0.025, na.rm = T),
quantile.dsc.975 = quantile(gap.dsc, 0.975, na.rm = T),
quantile.dsc.025 = quantile(gap.dsc, 0.025, na.rm = T)) %>%
mutate(group = "quantile",
treatment = treatment)
df.quantile[95:100, c("mean.dsc", "quantile.dsc.975", "quantile.dsc.025")] = NA
color.sc = "#2ab7ca"
color.dsc = "#fe4a49"
colors = c("Treatment Effect" = "grey20",
"Mean TE (SC)" = color.sc,
"Mean TE (DSC)" = color.dsc)
fills = c("95% Quantile (SC)" = color.sc,
"95% Quantile (DSC)" = color.dsc)
fig.big = df.gap %>%
ggplot(aes(x = time, group = group)) +
annotate("rect", xmin = 61, xmax = 70,
ymin = -25, ymax = 35, alpha = .3) +
geom_line(aes(y = gap.sc), col = color.sc, alpha=0.1) +
geom_line(aes(y = gap.dsc), col = color.dsc, alpha=0.1) +
geom_ribbon(aes(ymin = quantile.sc.025, ymax = quantile.sc.975,
fill = "95% Quantile (SC)"), data = df.quantile, alpha=0.6) +
geom_ribbon(aes(ymin = quantile.dsc.025, ymax = quantile.dsc.975,
fill = "95% Quantile (DSC)"), data = df.quantile, alpha=0.6) +
geom_line(aes(x = time, y = treatment, color = "Treatment Effect"),
data = df.quantile, alpha=1) +
geom_line(aes(x = time, y = mean.sc, color = "Mean TE (SC)"),
data = df.quantile, alpha=1) +
geom_line(aes(x = time, y = mean.dsc, col = "Mean TE (DSC)"),
data = df.quantile, alpha=1) +
scale_color_manual(name = NULL, values = colors) +
scale_fill_manual(name = NULL, values = fills) +
geom_vline(xintercept = 61, linetype="dashed", col = "grey20") +
geom_hline(yintercept = 0, linetype="dashed", col = "grey20") +
annotate("text", x = 59, y = 25, label = "Treatment",
col = "grey20", angle = 90) +
coord_cartesian(ylim = c(-20, 30)) +
xlab("Time") +
ylab("Gap (y - Synthetic Control)") +
theme_bw() +
theme(legend.position=c(0.3,0.15),
legend.box = "horizontal",
legend.background = element_rect(fill=NA))
fig.big
df.t.test = data.frame(Beta = c(0, 0.5, 1),
t = c(-4.7862, -5.8137, -8.2442),
P = c(0.0001, 0.0001, 0.0001))
fig.small = df.t.test %>%
ggplot(aes(x = Beta, y = t)) +
annotate("rect", xmin = -0.2, xmax = 1.2,
ymin = -15, ymax = -2.63, alpha = .3) +
geom_line(size = 1) +
geom_point(size = 2, col = color.dsc) +
geom_hline(yintercept = 0, linetype="solid", col = "black") +
geom_hline(yintercept = -2.63, linetype="dashed", col = "grey20") +
annotate("text", x = 0.75, y = -4,
label = "P < 0.01", col = "grey20") +
scale_x_continuous(breaks = c(0, 0.5, 1),
labels = c("0", "0.5", "1")) +
scale_y_continuous(breaks = c(-10, -5, 0)) +
coord_cartesian(ylim = c(-10, 0), xlim = c(0, 1)) +
xlab(expression(beta)) +
ylab("t") +
theme_bw() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
fig.sim = fig.big + annotation_custom(ggplotGrob(fig.small),
xmin = 5, xmax = 45,
ymin = 7, ymax = 30)
ggsave(paste0("./figures/sim_beta_", beta,"_v2.pdf"),
fig.sim, width = 6, height = 4.5,
units = "in", limitsize = FALSE)
library(forecast)
library(dtw)
## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
library(forecast)
library(dtw)
library(ggplot2)
N <- 1000
# Initialize vectors to store coefficients and p-values
coef_x <- numeric(N)
coef_xwarp <- numeric(N)
p_value_x <- numeric(N)
p_value_xwarp <- numeric(N)
# Loop 100 times
for (i in 1:N) {
# Simulate two independent ARIMA models
y <- arima.sim(n = 100, list(order = c(1, 0, 1), ar = 0.6, ma = 0.3))
x <- arima.sim(n = 100, list(order = c(1, 0, 1), ar = 0.7, ma = 0.4))
# Regress y on x
model_1 <- lm(y ~ x)
# Save the coefficient and p-value
coef_x[i] <- coef(model_1)[2]
p_value_x[i] <- summary(model_1)$coefficients[2, 4]
# Use dynamic time warping to warp x
dtw_result <- dtw(x, y, keep = TRUE)
xwarp <- x[dtw_result$index1]
# Regress y on xwarp
model_2 <- lm(y[!is.na(xwarp)] ~ xwarp)
# Save the coefficient and p-value
coef_xwarp[i] <- coef(model_2)[2]
p_value_xwarp[i] <- summary(model_2)$coefficients[2, 4]
}
# Combine the p-values into a data frame for ggplot
p_values_df <- data.frame(
p_value = c(p_value_x, p_value_xwarp),
type = factor(rep(c("x", "xwarp"), each = N))
)
# Combine the coefficients into a data frame for ggplot
coefs <- data.frame(
coef = c(coef_x, coef_xwarp),
type = factor(rep(c("x", "xwarp"), each = N))
)
# Plot the histograms of p-values
p <- ggplot(p_values_df, aes(x = p_value, fill = type)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20) +
theme_minimal() +
labs(title = "Histogram of p-values for x and xwarp",
x = "P-value",
y = "Frequency") +
scale_fill_manual(values = c("#00A0B0", "#EB7E3A"), name = "Type")
p
# Plot the histograms of p-values
coefs <- ggplot(coefs, aes(x = coef, fill = type)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20) +
theme_minimal() +
labs(title = "Histogram of coefs for x and xwarp",
x = "Coef",
y = "Frequency") +
scale_fill_manual(values = c("#00A0B0", "#EB7E3A"), name = "Type")
coefs
