ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[100]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
set.seed(20220407)
## Function --------------------------------------------------------------------
sim.data = function(n = 10, length = 100, extra.x = round(0.2*length),
t.treat = 60, shock = 10, arima.order = c(1,1,0),
ar.x = 0.6, ma.x = NULL, n.SMA = 1, n.diff = 1,
speed.upper = 2, speed.lower = 0.5,
treat.last = 0.1, reweight = TRUE, rescale = TRUE,
rescale.multiplier = 20, beta = 1){
# common exogenous shocks
x = arima.sim(list(order = arima.order, ar = ar.x, ma = ma.x),
n = length + extra.x + n.SMA + n.diff - 2)
# smoothing
x.SMA = ts(TTR::SMA(x, n = n.SMA)[-(1:(n.SMA - 1))])
# difference
x.diff = diff(x.SMA, difference = n.diff)
pos.diff = x.diff > 0
if (reweight) {
pos.ratio = sum(pos.diff)/sum(!pos.diff)
}
# speeds
log.speeds = seq(log(speed.lower), log(speed.upper), length.out = n)
rnd.ind = sample(c(1:round(0.3*n), round(0.7*n):n), size = 1)
log.speeds = c(log.speeds[rnd.ind], log.speeds[-rnd.ind])
# simulate
data = NULL
for (i in 1:n) {
# speed profile
log.speed = log.speeds[i]
if (reweight) {
if (pos.ratio > 1) {
pos.speed = exp(log.speed*(1/pos.ratio))
neg.speed = exp(-log.speed)
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed*pos.ratio)
}
}else{
pos.speed = exp(log.speed)
neg.speed = exp(-log.speed)
}
phi.shape = rep(NA, length.out = length + extra.x)
phi.shape[pos.diff] = pos.speed
phi.shape[!pos.diff] = neg.speed
log.phi.mean = mean(log(phi.shape), na.rm = T)
log.phi.sd = sd(log(phi.shape), na.rm = T)
phi.random = exp(rnorm(n = length + extra.x,
mean = log.phi.mean,
sd = log.phi.sd))
# treatment
if (i == 1) {
treatment = c(rep(0, t.treat),
seq(0, shock, length.out = round(treat.last*length)),
rep(shock, round((1 - treat.last)*length - t.treat)))
}else{
treatment = 0
}
phi = beta*phi.shape + (1 - beta)*phi.random
y = warpWITHweight(x[1:(length + extra.x)], phi)[1:length]
if (rescale) {
y = minmax.normalize(y, reference = y[1:t.treat])*rescale.multiplier
}
y = y + treatment
data = rbind(data,
data.frame(id = i,
unit = LETTERS[i],
time = 1:length,
value = y,
value_raw = y))
}
return(data)
}
## Data Simulation -------------------------------------------------------------
n.simulation = 150
length = 20
n = 10
beta = 1
shock = 10
# simulate
data.list.n20 = NULL
for (i in 1:n.simulation) {
data.list.n20[[i]] = sim.data(n = n, length = length,
t.treat = 12, shock = shock, ar.x = 0.6,
n.SMA = 1, n.diff = 1,
speed.upper = 2,
speed.lower = 0.5,
treat.last = 0.15,
reweight = TRUE,
rescale = TRUE,
rescale.multiplier = 10,
beta = beta)
}
data.list.n20[[100]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[60]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
data.list.n20[[15]] %>%
ggplot(aes(x = time, y = value, color = unit)) +
geom_line()
(1:9)*2+3
(0:2)*2+3
(0:2)*2+3
3:6
## Placebo ---------------------------------------------------------------------
df.mse = readRDS("./data/df.mse_basque.x.Rds")
View(df.mse)
(1:9)*2+3
1955:1969
View(data.list)
## Setup -----------------------------------------------------------------------
library(checkpoint)
checkpoint("2022-04-01")
library(parallel)
n.cores = detectCores()
library(tidyverse)
library(furrr)
plan(multisession, workers = n.cores - 1)
options(future.rng.onMisuse="ignore")
options(stringsAsFactors = FALSE)
source("./R/utility/misc.R")
source("./R/utility/TFDTW.R")
source("./R/utility/synth.R")
source("./R/utility/implement.R")
source("./R/utility/grid.search.R")
set.seed(20220407)
## Basque Terrorism Data -------------------------------------------------------
data(basque, package = "Synth")
data = basque
colnames(data)[1:4] = c("id", "unit", "time", "value")
data = data %>% mutate(invest_ratio = invest/value,
value_raw = value)
# rescale
df.rescale = data %>%
filter(time <= 1970) %>%
group_by(unit) %>%
summarise(value.min = min(value),
value.max = max(value)) %>%
ungroup()
mean.diff = mean(df.rescale$value.max - df.rescale$value.min)
df.rescale = df.rescale %>%
mutate(
multiplier = mean.diff/(value.max - value.min)
)
data = left_join(data, df.rescale, by = "unit")
data = data %>%
mutate(
value.bak = value_raw,
value_raw = (value_raw - value.min)*multiplier,
value = value_raw
)
# data list
data.list = list(list(target = "Basque Country (Pais Vasco)",
data = data))
ids = data$id %>%
unique
for (i in ids) {
data.temp = data %>% filter(!(id %in% c(i, 17)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
select2 = combn(setdiff(ids, 17), 2, simplify = TRUE)[,1:100]
for (i in 1:ncol(select2)) {
data.temp = data %>% filter(!(id %in% c(select2[, i], 17)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
## Preparation -----------------------------------------------------------------
df.mse = readRDS("./data/df.mse_basque.x.Rds")
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
# grid search space
search.grid = expand.grid(filter.width.range, k.range,
names(step.pattern.range)) %>%
`colnames<-`(c("filter.width", "k", "step.pattern"))
search.grid.list = search.grid %>% split(., seq(nrow(search.grid)))
View(search.grid.list)
View(search.grid)
## Placebo ---------------------------------------------------------------------
folder = "./data/placebo/basque/"
file.list = as.list(list.files(folder))
pre.start = 7
pre.end = 16
post.start = 17
post.end = 26
file.name = file.list[[10]]
file.name
data.id = strsplit(file.name, "_")[[1]][4]
data.id = as.numeric(strsplit(data.id, ".R")[[1]][1])
data.list = readRDS(paste0(folder, file.name))
View(data.list)
View(df.mse)
## Grid Search Basque ----------------------------------------------------------
# parameters
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 0, match.method = "fixed",
dist.quant = 0.95,
window.type = "none",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(
list(dep.var, 1960:1969, c("mean")),
list("invest_ratio", 1964:1969, c("mean")),
list("popdens", 1969, c("mean")),
list("sec.agriculture", 1961:1969, c("mean")),
list("sec.energy", 1961:1969, c("mean")),
list("sec.industry", 1961:1969, c("mean")),
list("sec.construction", 1961:1969, c("mean")),
list("sec.services.venta", 1961:1969, c("mean")),
list("sec.services.nonventa", 1961:1969, c("mean")),
list("school.illit", 1964:1969, c("mean")),
list("school.prim", 1964:1969, c("mean")),
list("school.med", 1964:1969, c("mean")),
list("school.high", 1964:1969, c("mean")),
list("school.post.high", 1964:1969, c("mean"))
)),
time.predictors.prior = 1955:1969,
time.optimize.ssr = 1955:1969)
args.TFDTW.synth = list(start.time = 1955, end.time = 1997, treat.time = 1970,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.3))
args.TFDTW.synth.all.units = list(target = data.list[[index]]$target,
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
detailed.output = TRUE,
all.units.parallel = FALSE)
index = 2
args.TFDTW.synth.all.units = list(target = data.list[[index]]$target,
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
detailed.output = TRUE,
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data.list[[index]]$data
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
## Grid Search Basque ----------------------------------------------------------
# parameters
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 0, match.method = "fixed",
dist.quant = 0.95,
window.type = "none",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(
list(dep.var, 1960:1969, c("mean")),
list("invest_ratio", 1964:1969, c("mean")),
list("popdens", 1969, c("mean")),
list("sec.agriculture", 1961:1969, c("mean")),
list("sec.energy", 1961:1969, c("mean")),
list("sec.industry", 1961:1969, c("mean")),
list("sec.construction", 1961:1969, c("mean")),
list("sec.services.venta", 1961:1969, c("mean")),
list("sec.services.nonventa", 1961:1969, c("mean")),
list("school.illit", 1964:1969, c("mean")),
list("school.prim", 1964:1969, c("mean")),
list("school.med", 1964:1969, c("mean")),
list("school.high", 1964:1969, c("mean")),
list("school.post.high", 1964:1969, c("mean"))
)),
time.predictors.prior = 1955:1969,
time.optimize.ssr = 1955:1969)
args.TFDTW.synth = list(start.time = 1955, end.time = 1997, treat.time = 1970,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.3))
args.TFDTW.synth.all.units = list(target = data.list[[index]]$target,
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
detailed.output = TRUE,
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data.list[[index]]$data
data.list[[index]]$data
data(basque, package = "Synth")
data = basque
colnames(data)[1:4] = c("id", "unit", "time", "value")
data = data %>% mutate(invest_ratio = invest/value,
value_raw = value)
# rescale
df.rescale = data %>%
filter(time <= 1970) %>%
group_by(unit) %>%
summarise(value.min = min(value),
value.max = max(value)) %>%
ungroup()
mean.diff = mean(df.rescale$value.max - df.rescale$value.min)
df.rescale = df.rescale %>%
mutate(
multiplier = mean.diff/(value.max - value.min)
)
data = left_join(data, df.rescale, by = "unit")
data = data %>%
mutate(
value.bak = value_raw,
value_raw = (value_raw - value.min)*multiplier,
value = value_raw
)
# data list
data.list = list(list(target = "Basque Country (Pais Vasco)",
data = data))
ids = data$id %>%
unique
for (i in ids) {
data.temp = data %>% filter(!(id %in% c(i, 17)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
select2 = combn(setdiff(ids, 17), 2, simplify = TRUE)[,1:100]
for (i in 1:ncol(select2)) {
data.temp = data %>% filter(!(id %in% c(select2[, i], 17)))
data.list = c(data.list,
list(list(target = data.temp$unit[1],
data = data.temp)))
}
## Grid Search Basque ----------------------------------------------------------
# parameters
filter.width.range = (1:9)*2+3
k.range = 4:9
step.pattern.range = list(
# symmetricP0 = dtw::symmetricP0, # too bumpy
# symmetricP05 = dtw::symmetricP05,
symmetricP1 = dtw::symmetricP1,
symmetricP2 = dtw::symmetricP2,
# asymmetricP0 = dtw::asymmetricP0, # too bumpy
# asymmetricP05 = dtw::asymmetricP05,
asymmetricP1 = dtw::asymmetricP1,
asymmetricP2 = dtw::asymmetricP2,
typeIc = dtw::typeIc,
# typeIcs = dtw::typeIcs,
# typeIIc = dtw::typeIIc,  # jumps
# typeIIIc = dtw::typeIIIc, # jumps
# typeIVc = dtw::typeIVc,  # jumps
typeId = dtw::typeId,
# typeIds = dtw::typeIds,
# typeIId = dtw::typeIId, # jumps
mori2006 = dtw::mori2006
)
grid.search.parallel = TRUE
args.TFDTW = list(buffer = 0, match.method = "fixed",
dist.quant = 0.95,
window.type = "none",
## other
norm.method = "t",
step.pattern2 = dtw::asymmetricP2,
n.burn = 3, n.IQR = 3,
ma = 3, ma.na = "original",
default.margin = 3,
n.q = 1, n.r = 1)
args.synth = list(predictors = NULL,
special.predictors =
expression(list(
list(dep.var, 1960:1969, c("mean")),
list("invest_ratio", 1964:1969, c("mean")),
list("popdens", 1969, c("mean")),
list("sec.agriculture", 1961:1969, c("mean")),
list("sec.energy", 1961:1969, c("mean")),
list("sec.industry", 1961:1969, c("mean")),
list("sec.construction", 1961:1969, c("mean")),
list("sec.services.venta", 1961:1969, c("mean")),
list("sec.services.nonventa", 1961:1969, c("mean")),
list("school.illit", 1964:1969, c("mean")),
list("school.prim", 1964:1969, c("mean")),
list("school.med", 1964:1969, c("mean")),
list("school.high", 1964:1969, c("mean")),
list("school.post.high", 1964:1969, c("mean"))
)),
time.predictors.prior = 1955:1969,
time.optimize.ssr = 1955:1969)
args.TFDTW.synth = list(start.time = 1955, end.time = 1997, treat.time = 1970,
args.TFDTW = args.TFDTW, args.synth = args.synth,
## 2nd
n.mse = 10,
## other
plot.figures = FALSE,
plot.path = "./figures/",
legend.pos = c(0.3, 0.3))
args.TFDTW.synth.all.units = list(target = data.list[[index]]$target,
# data = data,
args.TFDTW.synth = args.TFDTW.synth,
## 2nd
detailed.output = TRUE,
all.units.parallel = FALSE)
args.TFDTW.synth.all.units[["data"]] = data.list[[index]]$data
results = SimDesign::quiet(
grid.search(filter.width.range = filter.width.range,
k.range = k.range,
step.pattern.range = step.pattern.range,
args.TFDTW.synth.all.units = args.TFDTW.synth.all.units,
grid.search.parallel = grid.search.parallel)
)
grid.search.parallel
if (grid.search.parallel) {
fun.map = furrr::future_map
}else{
fun.map = purrr::map
}
# vanilla synthetic control
data = args.TFDTW.synth.all.units[["data"]]
units = data[c("id", "unit")] %>% distinct
units.list = units %>% split(., seq(nrow(units)))
args.synth = args.TFDTW.synth.all.units$args.TFDTW.synth$args.synth
args.synth[["df"]] = data
args.synth[["dep.var"]] = "value_raw"
res.synth.raw.list = units.list %>%
set_names(units$unit) %>%
fun.map(
~{
item = .
dependent.id = item$id
args.synth[["dependent.id"]] = dependent.id
res = do.call(do.synth, args.synth)
}
)
